<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jose Diaz-Gonzalez</title>
    <description>CakePHP Core Developer, Accidental Ops Guy, and Occasional Blogger</description>
    <link>http://josediazgonzalez.com/</link>
    <atom:link href="http://josediazgonzalez.com/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Mon, 16 Jun 2025 05:36:10 +0000</pubDate>
    <lastBuildDate>Mon, 16 Jun 2025 05:36:10 +0000</lastBuildDate>
    <generator>Jekyll v4.4.1</generator>
    
      <item>
        <title>Writing a Pak for the MinUI and NextUI launchers</title>
        <description>&lt;p&gt;This post is a collection of notes on how to create Paks for the MinUI libretro frontend and it’s forks, such as NextUI. Some of this material may be useful for other platforms, such as OnionOS. I’ll be adding to this document from time to time.&lt;/p&gt;

&lt;h2 id=&quot;some-background&quot;&gt;Some background&lt;/h2&gt;

&lt;p&gt;MinUI is a custom launcher for a variety of handhelds - notably the Anbernic RGNNXX, Trimui, and Miyoo devices, amongst others. It provides a simple interface for launching emulators via &lt;a href=&quot;https://www.libretro.com/&quot;&gt;libretro&lt;/a&gt; cores, allowing for resuse of existing emulators with a (very) sparing interface. Support for various cores depends on the device, but generally speaking MinUI does not support any OpenGL cores, meaning emulators for more modern consoles such as N64, Dreamcast, or Nintendo DS often need to use standalone “paks” that do not integrate as well with MinUI.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note: MinUI has a variety of forks - MyMinUI, FinUI, Corak’s MinUI, and NextUI - which all support the same general emulation functionality, though may add extra features on top such as other devices, button shortcuts, or enhanced emulation support. This post won’t go into the vagaries of each project as that isn’t super important for the topic.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A “pak” is a collection of files in a folder in a specific path on the SD Card which contains a MinUI installation. Paks are nominally device-specific in that the path where they are placed on the SD Card is a hint to MinUI to tell it whether the pak is loadable or not. Paks come in two varieties:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;Emus&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;Emu paks are either standalone emulators or wrappers for libretro cores
        &lt;ul&gt;
          &lt;li&gt;Standalone: A standalone emulator is &lt;em&gt;generally&lt;/em&gt; a compiled binary for a particular platform and contains everything needed to launch the emulator. These generally do not integrate well with MinUI functionality (such as sleep, save states, etc.) but maintainers may be able to wrap the standalone emulator in such a way as to support some of the built-in MinUI functionality.&lt;/li&gt;
          &lt;li&gt;Libretro wrappers: All emulators distributed with MinUI are wrappers for libretro cores, and are generally compiled for the device in question using a compatible SDK. Developers may also opt to use a libretro core in a custom emu, though this is usually only done in cases where a developer is not familiar with compiling the core and wishes to use a pre-compiled binary from a Retroarch installation for that device.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Community emu paks are stored at &lt;code&gt;/Emus/$PLATFORM/$EMU.pak&lt;/code&gt;, where &lt;code&gt;$PLATFORM&lt;/code&gt; is the device platform (such as &lt;code&gt;tg5040&lt;/code&gt; for the Trimui Brick and TSP) and &lt;code&gt;$EMU&lt;/code&gt; is the short name for the emu (such as &lt;code&gt;N64&lt;/code&gt;).&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Tools&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;Tools are extra utilities that can be launched on a MinUI installation. These can be as mundane as a button testing tool or something more complex, like an artwork scraper.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A pak &lt;em&gt;always&lt;/em&gt; has a &lt;code&gt;launch.sh&lt;/code&gt; file, which can be either an executable script or a compiled binary. If it is a compiled binary, developers will need to use a toolchain that supports the particular device in order to ensure the compiled binary supports the particular SDK for that device (such as certain sdl versions). The compiled binary can also be &lt;em&gt;launched by&lt;/em&gt; the &lt;code&gt;launch.sh&lt;/code&gt;, which is most common. Due to the need for an SDK and understanding of more complex programming languages, this is generally not the path folks take to write paks.&lt;/p&gt;

&lt;p&gt;The alternative to a compiled binary is to use a shell script for your &lt;code&gt;launch.sh&lt;/code&gt; file. While common shell scripting uses &lt;code&gt;bash&lt;/code&gt; for the execution environment, many devices do not have bash available, and thus it is recommended that users utilize regular &lt;code&gt;sh&lt;/code&gt; for their scripts.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;For a shell scripting tutorial, see &lt;a href=&quot;https://www.shellscript.sh/&quot;&gt;this site&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;pak-scaffolding&quot;&gt;Pak scaffolding&lt;/h2&gt;

&lt;p&gt;A &lt;code&gt;launch.sh&lt;/code&gt; shell script starts with the following shebang:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;#!/bin/sh

echo &quot;logic goes here&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I usually start mine with the following (comments are inline to make it easier to understand):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;#!/bin/sh
# get the pak directory and name
PAK_DIR=&quot;$(dirname &quot;$0&quot;)&quot;
PAK_NAME=&quot;$(basename &quot;$PAK_DIR&quot;)&quot;
PAK_NAME=&quot;${PAK_NAME%.*}&quot;
# turn on debugging so that I know what my script is executing
set -x

# optional, but remove the existing log file for the pak
rm -f &quot;$LOGS_PATH/$PAK_NAME.txt&quot;
# redirect stdout to the log directory, /.userdata/$PLATFORM/logs/$PAK_NAME.txt folder on your SD card.
exec &amp;gt;&amp;gt;&quot;$LOGS_PATH/$PAK_NAME.txt&quot;
# also redirect stderr to the same file
exec 2&amp;gt;&amp;amp;1

# write the current pak execution to the logs
echo &quot;$0&quot; &quot;$*&quot;
# change directories to my pak or error out if not possible
# if it errors out, something is deeply wrong
cd &quot;$PAK_DIR&quot; || exit 1

# for paks that support arm and arm64, get the current path
architecture=arm
if uname -m | grep -q &apos;64&apos;; then
    architecture=arm64
fi

# set the HOME directory to the shared path folder
# /.userdata/$PLATFORM/$PAK_NAME
export HOME=&quot;$SHARED_USERDATA_PATH/$PAK_NAME&quot;

# add $PAK_DIR/bin/$PLATFORM, $PAK_DIR/bin/$architecture, and $PAK_DIR/bin/shared directories to the PATH
# this lets us override binaries on a per-platform or per-architecture basis
# as well as have shared binaries that span all platforms and architectures
export PATH=&quot;$PAK_DIR/bin/$PLATFORM:$PAK_DIR/bin/$architecture:$PAK_DIR/bin/shared:$PATH&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Many of these devices run some form of Busybox, and thus the available utilities is pretty lacking. You &lt;em&gt;may&lt;/em&gt; have access to Python, but often you’ll need to distribute other binaries with your pak. I place them in the appropriate path (platform/architecture specific or shared) and ensure they are executable via &lt;code&gt;chmod +x&lt;/code&gt; on the terminal.&lt;/p&gt;

&lt;p&gt;For any persistent data, I place it in the &lt;code&gt;$HOME&lt;/code&gt; directory (as specified above) so that pak updates do not wipe out the data. This includes settings, which I can read and write in my pak like so:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;# write a value to our key, usually as a default
write_setting() {
  key=&quot;$1&quot;
  value=&quot;$2&quot;
  echo &quot;$value&quot; &amp;gt; &quot;$HOME/$key&quot;
}

# read a setting out for later usage
# also add support for a default value
read_setting() {
  key=&quot;$1&quot;
  default_value=&quot;$2&quot;

  if [ -f &quot;$HOME/$key&quot; ]; then
    cat &quot;$HOME/$key&quot;
    return
  fi

  if [ -n &quot;$default_value&quot; ]; then
    echo &quot;$default_value&quot;
  fi
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since you are writing shell code, you’ll probably want a way to either display a message, get input from a keyboard, or show a list of items on the screen. More complex packages will sometimes implement this in a single binary, but the following projects exist for interacting with &lt;em&gt;most&lt;/em&gt; platforms supported by MinUI and it’s derivatives:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/josegonzalez/minui-btntest&quot;&gt;minui-btntest&lt;/a&gt;: Allows for listening for a specific button or button combination. This is useful for background processes that wait for gamepad shortcuts.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/josegonzalez/minui-keyboard&quot;&gt;minui-keyboard&lt;/a&gt;: Displays an onscreen keyboard, so that users may input data. Limited to the ASCII character set due to usage of the built-in font used by MinUI.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/josegonzalez/minui-list&quot;&gt;minui-list&lt;/a&gt;: Displays a scrollable list of items on screen, with support for displaying and interacting with the items in various ways.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/josegonzalez/minui-presenter&quot;&gt;minui-presenter&lt;/a&gt;: Displays a message on the screen, and can also be used in a slideshow-like manner, amongst other features.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Generally speaking, you could use the above projects to support a workflow like:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Allowing someone to enable/disable background software&lt;/li&gt;
  &lt;li&gt;Displaying the current state of the background software&lt;/li&gt;
  &lt;li&gt;Showing error messages if the software cannot be launched&lt;/li&gt;
  &lt;li&gt;Showing some input for password collection&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The majority of existing community paks use shell scripting and the above binaries to provide their functionality, though users may use other projects as well.&lt;/p&gt;

&lt;h2 id=&quot;starting-services-on-minui-boot&quot;&gt;Starting services on MinUI boot&lt;/h2&gt;

&lt;p&gt;MinUI supports running a shared &lt;code&gt;auto.sh&lt;/code&gt; file on MinUI start, and that can be abused to provide &lt;code&gt;init&lt;/code&gt;-like behavior for starting services on device boot.&lt;/p&gt;

&lt;p&gt;The following is a pattern I use to start/stop services on boot. I use the following helper functions in my &lt;code&gt;launch.sh&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;# removes the `bin/shared/on-boot` script from auto.sh
disable_start_on_boot() {
    sed -i &quot;/${PAK_NAME}.pak-on-boot/d&quot; &quot;$SDCARD_PATH/.userdata/$PLATFORM/auto.sh&quot;
    sync
    return 0
}

# enables running the `bin/shared/on-boot` script on boot
enable_start_on_boot() {
    if [ ! -f &quot;$SDCARD_PATH/.userdata/$PLATFORM/auto.sh&quot; ]; then
        echo &apos;#!/bin/sh&apos; &amp;gt;&quot;$SDCARD_PATH/.userdata/$PLATFORM/auto.sh&quot;
        echo &apos;&apos; &amp;gt;&amp;gt;&quot;$SDCARD_PATH/.userdata/$PLATFORM/auto.sh&quot;
    fi

    echo &quot;test -f \&quot;\$SDCARD_PATH/Tools/\$PLATFORM/$PAK_NAME.pak/bin/shared/on-boot\&quot; &amp;amp;&amp;amp; \&quot;\$SDCARD_PATH/Tools/\$PLATFORM/$PAK_NAME.pak/bin/shared/on-boot\&quot; # ${PAK_NAME}.pak-on-boot&quot; &amp;gt;&amp;gt;&quot;$SDCARD_PATH/.userdata/$PLATFORM/auto.sh&quot;
    chmod +x &quot;$SDCARD_PATH/.userdata/$PLATFORM/auto.sh&quot;
    sync
    return 0
}

# check if the service is going to run on boot
# useful for displaying status in the ui
will_start_on_boot() {
    if grep -q &quot;${PAK_NAME}.pak-on-boot&quot; &quot;$SDCARD_PATH/.userdata/$PLATFORM/auto.sh&quot; &amp;gt;/dev/null 2&amp;gt;&amp;amp;1; then
        return 0
    fi
    return 1
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I’ll then typically create a &lt;code&gt;bin/shared/on-boot&lt;/code&gt; file in my pak with the following contents:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;#!/bin/sh
# some general scaffolding to ensure variables are properly set
BIN_DIR=&quot;$(dirname &quot;$0&quot;)&quot;
# get the pak directory and name
PAK_DIR=&quot;$(dirname &quot;$0&quot;)&quot;
PAK_NAME=&quot;$(basename &quot;$PAK_DIR&quot;)&quot;
PAK_NAME=&quot;${PAK_NAME%.*}&quot;
# turn on debugging so that I know what my script is executing
set -x

# optional, but remove the existing log file for the pak
rm -f &quot;$LOGS_PATH/$PAK_NAME.txt&quot;
# redirect stdout to the log directory, /.userdata/$PLATFORM/logs/$PAK_NAME.txt folder on your SD card.
exec &amp;gt;&amp;gt;&quot;$LOGS_PATH/$PAK_NAME.txt&quot;
# also redirect stderr to the same file
exec 2&amp;gt;&amp;amp;1

# write the current pak execution to the logs
echo &quot;$0&quot; &quot;$*&quot;
# change directories to my pak or error out if not possible
# if it errors out, something is deeply wrong
cd &quot;$PAK_DIR&quot; || exit 1

# the main script
main() {
  # run my bin/shared/service-on script in the background
  &quot;$BIN_DIR/shared/service-on&quot; &amp;amp;
}

main &quot;$@&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The important part is the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;&quot;$BIN_DIR/shared/service-on&quot; &amp;amp;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This executes my &lt;code&gt;bin/shared/service-on&lt;/code&gt; script in the background - the &lt;code&gt;&amp;amp;&lt;/code&gt; is used by shell to fork the process into the background and continue on. We do this so as to not potentially block MinUI from starting.&lt;/p&gt;
</description>
        <pubDate>Mon, 16 Jun 2025 00:46:00 +0000</pubDate>
        <link>http://josediazgonzalez.com/2025/06/16/writing-a-pak-for-the-minui-and-nextui-launchers/</link>
        <guid isPermaLink="true">http://josediazgonzalez.com/2025/06/16/writing-a-pak-for-the-minui-and-nextui-launchers/</guid>
        
        <category>minui</category>
        
        <category>nextui</category>
        
        <category>paks</category>
        
        
        <category>gaming</category>
        
      </item>
    
      <item>
        <title>Rotating AWS Credentials</title>
        <description>&lt;p&gt;I recently picked up managing my infrastructure again and found that I had… ancient AWS credentials for my personal AWS account. While I did want to write a new tool for this, I found &lt;a href=&quot;https://github.com/stefansundin/aws-rotate-key&quot;&gt;stefansundin/aws-rotate-key&lt;/a&gt; which appears to handle this quite well.&lt;/p&gt;

&lt;p&gt;Installing was easy (on a mac):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;brew install aws-rotate-key
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After which I was able to rotate my key:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;aws-rotate-key --profile my-aws-personal
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The nice thing here is that it allowed me to specify a profile and also prompted me before deleting any keys.&lt;/p&gt;

&lt;p&gt;AWS has a &lt;a href=&quot;https://aws.amazon.com/blogs/security/how-to-rotate-access-keys-for-iam-users/&quot;&gt;blog post&lt;/a&gt; on how to do this with the aws-cli, but honestly I’m not very enthused about the idea of manually running a ton of commands, so I think I’ll continue with the &lt;code&gt;aws-rotate-key&lt;/code&gt; method for now.&lt;/p&gt;
</description>
        <pubDate>Sun, 24 Apr 2022 16:04:00 +0000</pubDate>
        <link>http://josediazgonzalez.com/2022/04/24/rotating-aws-credentials/</link>
        <guid isPermaLink="true">http://josediazgonzalez.com/2022/04/24/rotating-aws-credentials/</guid>
        
        <category>aws</category>
        
        <category>cli</category>
        
        <category>os-x</category>
        
        
        <category>installation</category>
        
      </item>
    
      <item>
        <title>Generating an offline PyPI cache</title>
        <description>&lt;p&gt;When deploying Python applications to airgapped environments, it becomes necessary to ship application dependencies either with the app or provide a PyPI-like repository. I typically do this by using &lt;code&gt;pip2pi&lt;/code&gt; within a docker container.&lt;/p&gt;

&lt;p&gt;We start with a &lt;code&gt;Dockerfile&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Dockerfile&quot;&gt;FROM python:3.6.6-slim-stretch
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One unfortunate thing is that certain dependencies will require a specific Python version, so it is necessary to pin that version as shown above. The &lt;code&gt;pip2pi&lt;/code&gt; tool will only download the dependency for the current python version, so you may need to re-run this for a separate python version.&lt;/p&gt;

&lt;p&gt;Next, I set both the &lt;code&gt;WORKDIR&lt;/code&gt; and &lt;code&gt;PYTHONUNBUFFERED&lt;/code&gt;. I’ve set the former because of cargo-culting - honestly I can’t remember why at the moment - while the latter is set so that running a python &lt;code&gt;http.server&lt;/code&gt; doesn’t buffer logs until container exit.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Dockerfile&quot;&gt;WORKDIR /usr/src/app

ENV PYTHONUNBUFFERED=1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, we isntall pip2pi. As of the time of writing, currently has a bug wherein it doesn’t work for versions of &lt;code&gt;pip&amp;gt;=19.3&lt;/code&gt;, so I’ve pinned to &lt;code&gt;pip==19.2.3&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Dockerfile&quot;&gt;RUN pip install pip==19.2.3 &amp;amp;&amp;amp; \
    pip install pip2pi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;pip2pi&lt;/code&gt; tool can be used to install dependencies from either a single package or a &lt;code&gt;requirements.txt&lt;/code&gt; file. I’ll use the latter, and copy a bunch at once into &lt;code&gt;/tmp&lt;/code&gt;. These files should be placed in the same directory as the Dockerfile.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Dockerfile&quot;&gt;COPY *.txt /tmp/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Because I want to create a repo from two different &lt;code&gt;requirements.txt&lt;/code&gt; files, I’ll create separate pypi repositories and then merge them into one super repository using &lt;code&gt;dir2pi&lt;/code&gt;, which is included with the &lt;code&gt;pip2pi&lt;/code&gt; package. I don’t call &lt;code&gt;pip2pi&lt;/code&gt; once for two different files as the &lt;code&gt;requirements.txt&lt;/code&gt; files may have conflicting versions. Ideally &lt;code&gt;pip2pi&lt;/code&gt; would support installing conflicting versions so we wouldn’t have to manually merge the files, but what can we do.&lt;/p&gt;

&lt;p&gt;Note that I copy both &lt;code&gt;tar.gz&lt;/code&gt; and &lt;code&gt;whl&lt;/code&gt; files into my super repository.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Dockerfile&quot;&gt;RUN pip2pi /tmp/sample-1 -r /tmp/sample-1-requirements.txt &amp;amp;&amp;amp; \
    pip2pi /tmp/sample-2 -r /tmp/sample-2-requirements.txt

RUN rm -rf /tmp/sample-*/simple &amp;amp;&amp;amp; \
    mkdir -p packages &amp;amp;&amp;amp; \
    cp -f sample-1/*.tar.gz /tmp/packages &amp;amp;&amp;amp; cp -f sample-1/*.whl /usr/src/app/packages &amp;amp;&amp;amp; \
    cp -f sample-2/*.tar.gz /tmp/packages &amp;amp;&amp;amp; cp -f sample-2/*.whl /usr/src/app/packages &amp;amp;&amp;amp; \
    dir2pi packages
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, I creeate a tarball of the packages directory, and set the default command to the python &lt;code&gt;http.server&lt;/code&gt;. You’ll want to start a slightly different command - &lt;code&gt;SimpleHTTPServer&lt;/code&gt; - for Python 2.7.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Dockerfile&quot;&gt;RUN tar -czf packages.tar.gz packages

CMD [&quot;python&quot;, &quot;-m&quot;, &quot;http.server&quot;, &quot;80&quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Assuming everything is setup, you can now build the docker image and start the container:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;docker image build -t pypiserver .
docker container run -p 8081:80 --rm pypiserver
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I’m exposing the server on port 8081, and am now able to browse to &lt;code&gt;http://localhost:8081/packages.tar.gz&lt;/code&gt; to fetch a tarball that contains my pypiserver. This container can also be served directly, in which case the pip index-url would be &lt;code&gt;http://localhost:8081/packages/simple/&lt;/code&gt;.&lt;/p&gt;
</description>
        <pubDate>Mon, 29 Jun 2020 03:04:00 +0000</pubDate>
        <link>http://josediazgonzalez.com/2020/06/29/generating-an-offline-pypi-cache/</link>
        <guid isPermaLink="true">http://josediazgonzalez.com/2020/06/29/generating-an-offline-pypi-cache/</guid>
        
        <category>deployment</category>
        
        
        <category>opschops</category>
        
      </item>
    
      <item>
        <title>Deploying our application</title>
        <description>&lt;p&gt;A friend of mine asked for a custom website, so here I am, writing a custom cms. I know, there are plenty of systems out there that would handle his needs, but it’s also a good excuse to play around with CakePHP 3, so here we are.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;For the lazy, the codebase we’ll be working on will be available on &lt;a href=&quot;https://github.com/josegonzalez/cakeadvent-2016&quot;&gt;GitHub&lt;/a&gt;. I will be pushing each set of changes on the date when each blog post in this series is published. No cheating!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;errata-from-previous-post&quot;&gt;Errata from previous post&lt;/h2&gt;

&lt;p&gt;Looks like I should run the code before committing it. Here are a few issues with the last post:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;The OrderNotificationBehavior was attached improperly. It should be as follows:&lt;/p&gt;

    &lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$this-&amp;gt;addBehavior(&apos;PhotoPostType.OrderNotification&apos;);
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;The namespace for &lt;code&gt;OrderNotificationBehavior&lt;/code&gt; should be &lt;code&gt;namespace PhotoPostType\Model\Behavior;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;The &lt;code&gt;use&lt;/code&gt; statement for &lt;code&gt;QueueTrait&lt;/code&gt; should be &lt;code&gt;use Josegonzalez\CakeQueuesadilla\Traits\QueueTrait;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Missing a comma on line 20 of &lt;code&gt;OrderNotificationBehavior&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Extra semicolon around line 34 of &lt;code&gt;OrderNotificationBehavior&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Missing data from the &lt;code&gt;shipped&lt;/code&gt; MailerJob enqueue in &lt;code&gt;OrderNotificationBehavior&lt;/code&gt;. It should be:&lt;/p&gt;

    &lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&apos;data&apos; =&amp;gt; [
    &apos;order_id&apos; =&amp;gt; $entity-&amp;gt;id
],
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks to those who’ve pointed out my derps. These fixes are available as the first commit in the current release.&lt;/p&gt;

&lt;h2 id=&quot;creating-a-heroku-application&quot;&gt;Creating a heroku application&lt;/h2&gt;

&lt;p&gt;First, you’ll want to install the &lt;a href=&quot;https://devcenter.heroku.com/articles/heroku-cli&quot;&gt;heroku cli&lt;/a&gt;. This will be used to orchestrate our application on heroku.&lt;/p&gt;

&lt;p&gt;In the app repository, I ran the following to create a new heroku app:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;heroku create
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There is a bit of configuration we need to set in order to get our app fully working in heroku. First, lets ensure our &lt;code&gt;config/.env.default&lt;/code&gt; does not override our environment variables by setting an application name:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;heroku config:set APP_NAME=calico
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, we’ll disable debug, as otherwise deploying will have errors regarding DebugKit not being installed. On heroku, packages in our composer.json &lt;code&gt;require-dev&lt;/code&gt; section are not installed, so skipping this will mean our &lt;code&gt;config/bootstrap.php&lt;/code&gt; will attempt to load a non-existent plugin.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;heroku config:set DEBUG=false
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In order to send email, you’ll probably want to configure your &lt;code&gt;EMAIL_TRANSPORT_DEFAULT_URL&lt;/code&gt; env var as well. I’ve set mine to smtp settings from a Gmail account, though if you want to use a custom email transport for an email service, you are welcome to do that as well. Don’t forget to set a primary email!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;heroku config:set EMAIL_TRANSPORT_DEFAULT_URL=&quot;mail://user:secret@localhost:25/?client=null&amp;amp;timeout=30&amp;amp;tls=null&quot;
heroku config:set PRIMARY_EMAIL=&quot;example@example.com&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We’ll also want to configure stripe properly. I’ll add the following to my &lt;code&gt;config/app.php&lt;/code&gt; and &lt;code&gt;config/app.default.php&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;/**
 * Configures Stripe
 */
&apos;Stripe&apos; =&amp;gt; [
    &apos;publishablekey&apos; =&amp;gt; env(&apos;STRIPE_PUBLISHABLEKEY&apos;, &apos;pk_test_1234&apos;),
    &apos;secretkey&apos; =&amp;gt; env(&apos;STRIPE_SECRETKEY&apos;, &apos;sk_test_abcd&apos;),
    &apos;mode&apos; =&amp;gt; env(&apos;STRIPE_MODE&apos;, &apos;test&apos;)
],

/**
 * Sets primary config for our app (email, etc.)
 */
&apos;Primary&apos; =&amp;gt; [
    &apos;email&apos; =&amp;gt; env(&apos;PRIMARY_EMAIL&apos;, &apos;example@example.com&apos;),
],
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And we can set the env vars like normal:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;heroku config:set STRIPE_PUBLISHABLEKEY=pk_test_1234
heroku config:set STRIPE_SECRETKEY=sk_test_abcd
heroku config:set STRIPE_MODE=test
heroku config:set PRIMARY_EMAIL=&quot;example@example.com&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Commit!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add config/app.default.php
git commit -m &quot;Ensure we read env vars for stripe and primary email configuration&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I’ll configure a database, queuing, and our cache layer using some heroku addons for postgres and redis:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;heroku addons:create heroku-postgresql:hobby-dev
heroku addons:create heroku-redis:hobby-dev

APP_NAME=&quot;$(heroku config:get APP_NAME)&quot;
DATABASE_URL=&quot;$(heroku config:get DATABASE_URL)&quot;
REDIS_URL=&quot;$(heroku config:get REDIS_URL)&quot;
heroku config:set QUEUESADILLA_DEFAULT_URL=&quot;${DATABASE_URL}&quot;
heroku config:set CACHE_DEFAULT_URL=&quot;${REDIS_URL}?prefix=${APP_NAME}_&quot;
heroku config:set CACHE_CAKECORE_URL=&quot;${REDIS_URL}?prefix=${APP_NAME}_cake_core_&quot;
heroku config:set CACHE_CAKEMODEL_URL=&quot;${REDIS_URL}?prefix=${APP_NAME}_cake_model_&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One thing that needs to be done is we need to ensure we build assets in heroku, or our admin won’t be able to render assets. I ran the following command locally:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;mkdir webroot/cache_css webroot/cache_js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then I added those directories to my &lt;code&gt;.gitignore&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;/webroot/cache_css
/webroot/cache_js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And finally, I added the following to the application’s &lt;code&gt;composer.json&lt;/code&gt; in &lt;code&gt;scripts.compile&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;&quot;mkdir webroot/cache_css webroot/cache_js&quot;,
&quot;bin/cake asset_compress build&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And I’ll commit these changes:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add .gitignore composer.json
git commit -m &quot;Build assets on deploy&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, we’ll need to square away our logging setup.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;heroku config:set LOG_DEBUG_URL=&quot;syslog://logs?levels[]=notice&amp;amp;levels[]=info&amp;amp;levels[]=debug&amp;amp;file=debug&quot;
heroku config:set LOG_ERROR_URL=&quot;syslog://logs?levels[]=warning&amp;amp;levels[]=error&amp;amp;levels[]=critical&amp;amp;levels[]=alert&amp;amp;levels[]=emergency&amp;amp;file=error&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now push your code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git push heroku master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You’ll see a lot of build output, but once it is done, you can type &lt;code&gt;heroku open&lt;/code&gt; to open your site in the browser.&lt;/p&gt;

&lt;h2 id=&quot;background-workers&quot;&gt;Background workers&lt;/h2&gt;

&lt;p&gt;You can add background queue workers by adding the following to your &lt;code&gt;Procfile&lt;/code&gt; if it does not already exist:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;worker: bin/cake queuesadilla
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then commit and push the change:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add Procfile
git commit -m &quot;Allow running a background worker&quot;
git push heroku master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To start a worker, you’ll need to scale it up:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;heroku ps:scale worker=1
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;logging-in&quot;&gt;Logging in&lt;/h2&gt;

&lt;p&gt;You’ll need to create a user to login as. To do so, you can start a new heroku dyno:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;heroku run bash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then run our helper &lt;code&gt;UserShell&lt;/code&gt; to create the first user:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;bin/cake user --username-field email
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;homework-time-uploading-images&quot;&gt;Homework Time: Uploading images&lt;/h2&gt;

&lt;p&gt;This will require a bit of reworking. Firstly, data is not persisted, so we need to store it on an external filesystem. I prefer &lt;a href=&quot;http://flysystem.thephpleague.com/adapter/aws-s3-v3/&quot;&gt;AWS S3&lt;/a&gt; for storing static files. Fortunately, flysystem supports quite adapters for different storage engines, so you can use whatever you’d like.&lt;/p&gt;

&lt;p&gt;There are two places in the codebase you’ll need to edit:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;UsersTable&lt;/code&gt;: The &lt;code&gt;Josegonzalez/Upload&lt;/code&gt; behavior can be configured to use any adapter. Documentation &lt;a href=&quot;https://cakephp-upload.readthedocs.io/en/latest/configuration.html&quot;&gt;here&lt;/a&gt; on that.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;PhotoPostType&lt;/code&gt;: The adapter configured for upload is the &lt;code&gt;Local&lt;/code&gt; adapter. Use whichever one you feel most comfortable.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I won’t be making these changes in my version, but in a future release of my client’s CMS, these two should be configurable :)&lt;/p&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;For those that may just want to ensure their codebase matches what has been done so far, the codebase is available on GitHub and tagged as &lt;a href=&quot;https://github.com/josegonzalez/cakeadvent-2016/tree/0.0.24&quot;&gt;0.0.24&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And that’s a rap! We’ve created a fully-functioning CMS with:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Image uploading&lt;/li&gt;
  &lt;li&gt;Custom theme support&lt;/li&gt;
  &lt;li&gt;CrudView-generated admin dashboard&lt;/li&gt;
  &lt;li&gt;User authentication&lt;/li&gt;
  &lt;li&gt;Password reset flows&lt;/li&gt;
  &lt;li&gt;Email sending and previews&lt;/li&gt;
  &lt;li&gt;Background queues&lt;/li&gt;
  &lt;li&gt;Simple ecommerce functionality&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Lots of stuff here for really not much code, and it was all thanks to the power of CakePHP.&lt;/p&gt;

&lt;p&gt;Be sure to follow along via twitter on &lt;a href=&quot;https://twitter.com/savant&quot;&gt;@savant&lt;/a&gt;. If you’d like to subscribe to this blog, you may follow the &lt;a href=&quot;/atom.xml&quot;&gt;rss feed here&lt;/a&gt;. Also, all posts in the series will be conveniently linked on the sidebar of every post in the 2016 CakeAdvent Calendar.&lt;/p&gt;

&lt;p&gt;Hope you all had as much fun as I did with this year’s CakeAdvent Calendar. Until next post, take care and happy holidays!&lt;/p&gt;
</description>
        <pubDate>Sat, 24 Dec 2016 05:04:00 +0000</pubDate>
        <link>http://josediazgonzalez.com/2016/12/24/deploying-our-application/</link>
        <guid isPermaLink="true">http://josediazgonzalez.com/2016/12/24/deploying-our-application/</guid>
        
        <category>deployment</category>
        
        <category>heroku</category>
        
        <category>cakeadvent-2016</category>
        
        <category>cakephp</category>
        
        
        <category>cakephp</category>
        
      </item>
    
      <item>
        <title>Order status notifications</title>
        <description>&lt;p&gt;A friend of mine asked for a custom website, so here I am, writing a custom cms. I know, there are plenty of systems out there that would handle his needs, but it’s also a good excuse to play around with CakePHP 3, so here we are.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;For the lazy, the codebase we’ll be working on will be available on &lt;a href=&quot;https://github.com/josegonzalez/cakeadvent-2016&quot;&gt;GitHub&lt;/a&gt;. I will be pushing each set of changes on the date when each blog post in this series is published. No cheating!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;order-mailer-for-email-notifications&quot;&gt;Order Mailer for email notifications&lt;/h2&gt;

&lt;p&gt;First thing is we’ll need an OrderMailer to handle all the actual email sending. Here is mine:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
namespace PhotoPostType\Mailer;

use Cake\Core\Configure;
use Cake\Mailer\Mailer;
use Josegonzalez\MailPreview\Mailer\PreviewTrait;

class OrderMailer extends Mailer
{

    use PreviewTrait;

    /**
     * Email sent on new order
     *
     * @param array $email User email
     * @param string $token Token used for validation
     * @return \Cake\Mailer\Mailer
     */
    public function newOrder($data)
    {
        $this-&amp;gt;loadModel(&apos;PhotoPostType.Orders&apos;);
        $order = $this-&amp;gt;Orders-&amp;gt;get($data[&apos;order_id&apos;]);
        return $this-&amp;gt;to(Configure::read(&apos;Primary.email&apos;))
            -&amp;gt;subject(&apos;New Order&apos;)
            -&amp;gt;template(&apos;PhotoPostType.new_order&apos;)
            -&amp;gt;set($order)
            -&amp;gt;emailFormat(&apos;html&apos;);
    }

    /**
     * Email sent on order received
     *
     * @param array $email User email
     * @param string $token Token used for validation
     * @return \Cake\Mailer\Mailer
     */
    public function received($data)
    {
        $this-&amp;gt;loadModel(&apos;PhotoPostType.Orders&apos;);
        $order = $this-&amp;gt;Orders-&amp;gt;get($data[&apos;order_id&apos;]);
        return $this-&amp;gt;to($order-&amp;gt;email)
            -&amp;gt;subject(&apos;Order Received!&apos;)
            -&amp;gt;template(&apos;PhotoPostType.received&apos;)
            -&amp;gt;set($order)
            -&amp;gt;emailFormat(&apos;html&apos;);
    }

    /**
     * Email sent on order shipped
     *
     * @param array $email User email
     * @param string $token Token used for validation
     * @return \Cake\Mailer\Mailer
     */
    public function shipped($data)
    {
        $this-&amp;gt;loadModel(&apos;PhotoPostType.Orders&apos;);
        $order = $this-&amp;gt;Orders-&amp;gt;get($data[&apos;order_id&apos;]);
        return $this-&amp;gt;to($order-&amp;gt;email)
            -&amp;gt;subject(&apos;Order Shipped!&apos;)
            -&amp;gt;template(&apos;PhotoPostType.shipped&apos;)
            -&amp;gt;set($order)
            -&amp;gt;emailFormat(&apos;html&apos;);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I’ve defined three different types of emails:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;newOrder&lt;/code&gt;: Sent to the email configured at &lt;code&gt;Primary.email&lt;/code&gt; when we get a new order&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;received&lt;/code&gt;: Sent to the orderer when we’ve received their order&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;shipped&lt;/code&gt;: Sent to the orderer when we’ve shipped their email&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I added the following to my &lt;code&gt;config/.env&lt;/code&gt; and &lt;code&gt;config/.env.default&lt;/code&gt; to configure the &lt;code&gt;Primary.email&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;export PRIMARY_EMAIL=&quot;example@example.com&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here are my html templates for each email, which I’ve placed in &lt;code&gt;plugins/PhotoPostType/Template/Email/html/&lt;/code&gt;. You can create equivalent text templates as well:&lt;/p&gt;

&lt;h4 id=&quot;pluginsphotoposttypetemplateemailhtmlnew_orderctp&quot;&gt;&lt;code&gt;plugins/PhotoPostType/Template/Email/html/new_order.ctp&lt;/code&gt;&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;h2&amp;gt;There was a new order&amp;lt;/h2&amp;gt;

&amp;lt;p&amp;gt;
    See the new order &amp;lt;?= $this-&amp;gt;Html-&amp;gt;link(&apos;here&apos;, \Cake\Routing\Router::url([
        &apos;plugin&apos; =&amp;gt; &apos;PhotoPostType&apos;,
        &apos;controller&apos; =&amp;gt; &apos;Orders&apos;,
        &apos;action&apos; =&amp;gt; &apos;index&apos;,
        $token
    ], true)); ?&amp;gt;
&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;
    Order details:
&amp;lt;/p&amp;gt;
&amp;lt;dl&amp;gt;
    &amp;lt;dt&amp;gt;name&amp;lt;/dd&amp;gt;
    &amp;lt;dd&amp;gt;&amp;lt;?= $order-&amp;gt;name ?&amp;gt;&amp;lt;/dd&amp;gt;

    &amp;lt;dt&amp;gt;address&amp;lt;/dd&amp;gt;
    &amp;lt;dd&amp;gt;&amp;lt;?= $order-&amp;gt;address_line_1 ?&amp;gt;&amp;lt;/dd&amp;gt;

    &amp;lt;dt&amp;gt;zip&amp;lt;/dd&amp;gt;
    &amp;lt;dd&amp;gt;&amp;lt;?= $order-&amp;gt;address_zip ?&amp;gt;&amp;lt;/dd&amp;gt;

    &amp;lt;dt&amp;gt;state&amp;lt;/dd&amp;gt;
    &amp;lt;dd&amp;gt;&amp;lt;?= $order-&amp;gt;address_state ?&amp;gt;&amp;lt;/dd&amp;gt;

    &amp;lt;dt&amp;gt;city&amp;lt;/dd&amp;gt;
    &amp;lt;dd&amp;gt;&amp;lt;?= $order-&amp;gt;address_city ?&amp;gt;&amp;lt;/dd&amp;gt;

    &amp;lt;dt&amp;gt;countrys&amp;lt;/dd&amp;gt;
    &amp;lt;dd&amp;gt;&amp;lt;?= $order-&amp;gt;address_country ?&amp;gt;&amp;lt;/dd&amp;gt;
&amp;lt;/dl&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;pluginsphotoposttypetemplateemailhtmlreceivedctp&quot;&gt;&lt;code&gt;plugins/PhotoPostType/Template/Email/html/received.ctp&lt;/code&gt;&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;h2&amp;gt;Your order was recieved&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;
    Thanks for your order! We will be shortly shipping out your order to the following address:
&amp;lt;/p&amp;gt;
&amp;lt;dl&amp;gt;
    &amp;lt;dt&amp;gt;name&amp;lt;/dd&amp;gt;
    &amp;lt;dd&amp;gt;&amp;lt;?= $order-&amp;gt;name ?&amp;gt;&amp;lt;/dd&amp;gt;

    &amp;lt;dt&amp;gt;address&amp;lt;/dd&amp;gt;
    &amp;lt;dd&amp;gt;&amp;lt;?= $order-&amp;gt;address_line_1 ?&amp;gt;&amp;lt;/dd&amp;gt;

    &amp;lt;dt&amp;gt;zip&amp;lt;/dd&amp;gt;
    &amp;lt;dd&amp;gt;&amp;lt;?= $order-&amp;gt;address_zip ?&amp;gt;&amp;lt;/dd&amp;gt;

    &amp;lt;dt&amp;gt;state&amp;lt;/dd&amp;gt;
    &amp;lt;dd&amp;gt;&amp;lt;?= $order-&amp;gt;address_state ?&amp;gt;&amp;lt;/dd&amp;gt;

    &amp;lt;dt&amp;gt;city&amp;lt;/dd&amp;gt;
    &amp;lt;dd&amp;gt;&amp;lt;?= $order-&amp;gt;address_city ?&amp;gt;&amp;lt;/dd&amp;gt;

    &amp;lt;dt&amp;gt;countrys&amp;lt;/dd&amp;gt;
    &amp;lt;dd&amp;gt;&amp;lt;?= $order-&amp;gt;address_country ?&amp;gt;&amp;lt;/dd&amp;gt;
&amp;lt;/dl&amp;gt;
&amp;lt;p&amp;gt;Thanks again, and enjoy!&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;pluginsphotoposttypetemplateemailhtmlshippedctp&quot;&gt;&lt;code&gt;plugins/PhotoPostType/Template/Email/html/shipped.ctp&lt;/code&gt;&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;h2&amp;gt;Your order was shipped&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;
    Thanks for your order! Here are your order details:
&amp;lt;/p&amp;gt;
&amp;lt;dl&amp;gt;
    &amp;lt;dt&amp;gt;name&amp;lt;/dd&amp;gt;
    &amp;lt;dd&amp;gt;&amp;lt;?= $order-&amp;gt;name ?&amp;gt;&amp;lt;/dd&amp;gt;

    &amp;lt;dt&amp;gt;address&amp;lt;/dd&amp;gt;
    &amp;lt;dd&amp;gt;&amp;lt;?= $order-&amp;gt;address_line_1 ?&amp;gt;&amp;lt;/dd&amp;gt;

    &amp;lt;dt&amp;gt;zip&amp;lt;/dd&amp;gt;
    &amp;lt;dd&amp;gt;&amp;lt;?= $order-&amp;gt;address_zip ?&amp;gt;&amp;lt;/dd&amp;gt;

    &amp;lt;dt&amp;gt;state&amp;lt;/dd&amp;gt;
    &amp;lt;dd&amp;gt;&amp;lt;?= $order-&amp;gt;address_state ?&amp;gt;&amp;lt;/dd&amp;gt;

    &amp;lt;dt&amp;gt;city&amp;lt;/dd&amp;gt;
    &amp;lt;dd&amp;gt;&amp;lt;?= $order-&amp;gt;address_city ?&amp;gt;&amp;lt;/dd&amp;gt;

    &amp;lt;dt&amp;gt;countrys&amp;lt;/dd&amp;gt;
    &amp;lt;dd&amp;gt;&amp;lt;?= $order-&amp;gt;address_country ?&amp;gt;&amp;lt;/dd&amp;gt;
&amp;lt;/dl&amp;gt;
&amp;lt;p&amp;gt;Thanks again, and enjoy!&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pretty straightforward. I’ll commit my changes now.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add config/.env.default plugins/PhotoPostType/src/Mailer/OrderMailer.php plugins/PhotoPostType/src/Template/Email/html/new_order.ctp plugins/PhotoPostType/src/Template/Email/html/received.ctp plugins/PhotoPostType/src/Template/Email/html/shipped.ctp
git commit -m &quot;Create order status emails&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;shipping-emails&quot;&gt;Shipping Emails&lt;/h2&gt;

&lt;p&gt;This one was a bit more difficult to figure out where it should go. I want to hook into CakePHP’s &lt;code&gt;Model.afterSave&lt;/code&gt; event as seamlessly as possible. We could add a new event handler to our &lt;code&gt;OrdersListener&lt;/code&gt; and bind it on the Model as well, but that seems icky. I’m going to instead use model behaviors, which are purpose-built to handle all table events. The following is my &lt;code&gt;OrderNotificationBehavior&lt;/code&gt;, located at &lt;code&gt;plugins/PhotoPostType/src/Model/Behavior/OrderNotificationBehavior.php&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
namespace PhotoPostType\Model\Behavior;

use Cake\Datasource\EntityInterface;
use Cake\Event\Event;
use Cake\ORM\Behavior;
use Josegonzalez\CakeQueuesadilla\Traits\QueueTrait;

class OrderNotificationBehavior extends Behavior
{
    use QueueTrait;

    public function afterSave(Event $event, EntityInterface $entity)
    {
        if ($entity-&amp;gt;isNew()) {
            $this-&amp;gt;push([&apos;\App\Job\MailerJob&apos;, &apos;execute&apos;], [
                &apos;action&apos; =&amp;gt; &apos;received&apos;,
                &apos;mailer&apos; =&amp;gt; &apos;PhotoPostType.Orders&apos;,
                &apos;data&apos; =&amp;gt; [
                    &apos;order_id&apos; =&amp;gt; $entity-&amp;gt;id,
                    &apos;email&apos; =&amp;gt; $entity-&amp;gt;email,
                    &apos;name&apos; =&amp;gt; $entity-&amp;gt;shipping_name,
                    &apos;address_line_1&apos; =&amp;gt; $entity-&amp;gt;shipping_address_line_1,
                    &apos;address_zip&apos; =&amp;gt; $entity-&amp;gt;shipping_address_zip,
                    &apos;address_state&apos; =&amp;gt; $entity-&amp;gt;shipping_address_state,
                    &apos;address_city&apos; =&amp;gt; $entity-&amp;gt;shipping_address_city,
                    &apos;address_country&apos; =&amp;gt; $entity-&amp;gt;shipping_address_country,
                ]
            ]);

            $this-&amp;gt;push([&apos;\App\Job\MailerJob&apos;, &apos;execute&apos;], [
                &apos;action&apos; =&amp;gt; &apos;newOrder&apos;,
                &apos;mailer&apos; =&amp;gt; &apos;PhotoPostType.Orders&apos;,
                &apos;data&apos; =&amp;gt; [
                    &apos;order_id&apos; =&amp;gt; $entity-&amp;gt;id
                ],
            ]);
        } elseif ($entity-&amp;gt;shipped) {
            $this-&amp;gt;push([&apos;\App\Job\MailerJob&apos;, &apos;execute&apos;], [
                &apos;action&apos; =&amp;gt; &apos;shipped&apos;,
                &apos;mailer&apos; =&amp;gt; &apos;PhotoPostType.Orders&apos;,
                &apos;data&apos; =&amp;gt; [
                    &apos;order_id&apos; =&amp;gt; $entity-&amp;gt;id
                ],
            ]);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It’s pretty straightforward. I am reusing the &lt;code&gt;MailerJob&lt;/code&gt; to send the emails in the background - awh yis - and sending all three emails depending upon whether:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The order was just created&lt;/li&gt;
  &lt;li&gt;The order was shipped&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;push&lt;/code&gt; method comes from our &lt;code&gt;QueueTrait&lt;/code&gt;, which helpfully uses the default queue handler to push jobs.&lt;/p&gt;

&lt;p&gt;Next, we’ll link it up to our &lt;code&gt;PhotoPostType.Orders::initialize()&lt;/code&gt; method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$this-&amp;gt;addBehavior(&apos;OrderNotificationBehavior&apos;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And we’re done!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git commit plugins/PhotoPostType/src/Model/Behavior/OrderNotificationBehavior.php plugins/PhotoPostType/src/Model/Table/OrdersTable.php
git commit -m &quot;Send emails when the status of the order changes&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;homework-time&quot;&gt;Homework time&lt;/h2&gt;

&lt;p&gt;You’ll notice that the CMS user has no idea what was actually ordered - they’d need to guess this from the charge id in &lt;code&gt;Stripe&lt;/code&gt;. This kinda bites, so your task is to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Track the post id that is being purchased.&lt;/li&gt;
  &lt;li&gt;Save that relation to the &lt;code&gt;orders&lt;/code&gt; table.&lt;/li&gt;
  &lt;li&gt;Display a link to what is being purchased on the &lt;code&gt;/admin/orders&lt;/code&gt; page.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;For those that may just want to ensure their codebase matches what has been done so far, the codebase is available on GitHub and tagged as &lt;a href=&quot;https://github.com/josegonzalez/cakeadvent-2016/tree/0.0.23&quot;&gt;0.0.23&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It’s been almost a month, but our CMS is rounding to a close. Our next task is to actually place it online somewhere so our client can view it and suggest any changes. Ideally this happens earlier in the process, but we’ve only just completed the initial functionality, so it’s a reasonable compromise.&lt;/p&gt;

&lt;p&gt;Be sure to follow along via twitter on &lt;a href=&quot;https://twitter.com/savant&quot;&gt;@savant&lt;/a&gt;. If you’d like to subscribe to this blog, you may follow the &lt;a href=&quot;/atom.xml&quot;&gt;rss feed here&lt;/a&gt;. Also, all posts in the series will be conveniently linked on the sidebar of every post in the 2016 CakeAdvent Calendar. Come back tomorrow for more delicious content.&lt;/p&gt;
</description>
        <pubDate>Fri, 23 Dec 2016 08:30:00 +0000</pubDate>
        <link>http://josediazgonzalez.com/2016/12/23/order-status-notifications/</link>
        <guid isPermaLink="true">http://josediazgonzalez.com/2016/12/23/order-status-notifications/</guid>
        
        <category>emails</category>
        
        <category>mailers</category>
        
        <category>orders</category>
        
        <category>cakeadvent-2016</category>
        
        <category>cakephp</category>
        
        
        <category>cakephp</category>
        
      </item>
    
      <item>
        <title>Handling Photo Orders</title>
        <description>&lt;p&gt;A friend of mine asked for a custom website, so here I am, writing a custom cms. I know, there are plenty of systems out there that would handle his needs, but it’s also a good excuse to play around with CakePHP 3, so here we are.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;For the lazy, the codebase we’ll be working on will be available on &lt;a href=&quot;https://github.com/josegonzalez/cakeadvent-2016&quot;&gt;GitHub&lt;/a&gt;. I will be pushing each set of changes on the date when each blog post in this series is published. No cheating!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;routing-the-orders-admin-panel&quot;&gt;Routing the orders admin panel&lt;/h2&gt;

&lt;p&gt;Before we can get to configuring our admin panel, we’ll need to be able to route it. For our &lt;code&gt;PhotoPostType&lt;/code&gt;, we’ve hardcoded just a single route for viewing an order, but we want to now also properly route admin requests. Here is what I’ve modified the &lt;code&gt;plugins/PhotoPostType/config/routes.php&lt;/code&gt; to:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
use Cake\Core\Configure;
use Cake\Routing\RouteBuilder;
use Cake\Routing\Router;
use Cake\Routing\Route\DashedRoute;

$routeClass = Configure::read(&apos;PhotoPostType.Routes.routeClass&apos;);
$routeClass = $routeClass ?: DashedRoute::class;

Router::plugin(&apos;PhotoPostType&apos;, [&apos;path&apos; =&amp;gt; &apos;/&apos;], function ($routes) use ($routeClass) {
    $photoPostTypePrefix = Configure::read(&apos;PhotoPostType.Routes.prefix&apos;);
    $photoPostTypePrefix = $photoPostTypePrefix ?: &apos;/order&apos;;
    $photoPostTypePrefix = &apos;/&apos; . trim($photoPostTypePrefix, &quot;\t\n\r\0\x0B/&quot;);

    $routes-&amp;gt;connect(
        $photoPostTypePrefix,
        [&apos;controller&apos; =&amp;gt; &apos;Orders&apos;, &apos;action&apos; =&amp;gt; &apos;order&apos;],
        [&apos;id&apos; =&amp;gt; &apos;\d+&apos;, &apos;pass&apos; =&amp;gt; [&apos;id&apos;], &apos;routeClass&apos; =&amp;gt; $routeClass]
    );
    $routes-&amp;gt;scope(&apos;/admin/orders&apos;, [&apos;controller&apos; =&amp;gt; &apos;Orders&apos;], function (RouteBuilder $routes) {
          $routes-&amp;gt;connect(&apos;/&apos;, [&apos;action&apos; =&amp;gt; &apos;index&apos;]);
          $routes-&amp;gt;fallbacks();
    });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I’m now mounting the plugin under &lt;code&gt;/&lt;/code&gt; and also scoping &lt;code&gt;/admin/orders&lt;/code&gt; to our &lt;code&gt;PhotoPostType.OrdersController&lt;/code&gt;. One other small change we’ll need to do is modify our &lt;code&gt;AppController::getUtilityNavigation()&lt;/code&gt; method to scope all existing navigation elements to &lt;code&gt;plugin =&amp;gt; null&lt;/code&gt;. I’ve also added a single extra navigation element for logged in users:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;new \CrudView\Menu\MenuItem(
    &apos;Orders&apos;,
    [&apos;plugin&apos; =&amp;gt; &apos;PhotoPostType&apos;, &apos;controller&apos; =&amp;gt; &apos;Orders&apos;, &apos;action&apos; =&amp;gt; &apos;index&apos;]
),
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Not the nicest thing in the world, as now we’re crossing boundaries between plugins and the application, but this will do for now. We could alternatively use an event and bind to that event in &lt;code&gt;plugins/PhotoPostType/config/bootstrap.php&lt;/code&gt;, but that seems like more trouble than it’s worth for now.&lt;/p&gt;

&lt;p&gt;Save your work:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add plugins/PhotoPostType/config/routes.php src/Controller/AppController.php
git commit -m &quot;Route and link to OrdersController admin actions&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;enabling-crudview-for-the-orderscontroller&quot;&gt;Enabling CrudView for the OrdersController&lt;/h2&gt;

&lt;p&gt;This is relatively simple. Since our &lt;code&gt;OrdersController&lt;/code&gt; eventually inherits from the &lt;code&gt;AppController&lt;/code&gt;, all we need to do is enable crud-view and allow access to it. I added the following property to my &lt;code&gt;OrdersController&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;/**
 * A list of actions where the CrudView.View
 * listener should be enabled. If an action is
 * in this list but `isAdmin` is false, the
 * action will still be rendered via CrudView.View
 *
 * @var array
 */
protected $adminActions = [&apos;index&apos;, &apos;delete&apos;];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And next I’ve added the following &lt;code&gt;OrdersController::isAuthorized()&lt;/code&gt; method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;/**
 * Check if the provided user is authorized for the request.
 *
 * @param array|\ArrayAccess|null $user The user to check the authorization of.
 *   If empty the user fetched from storage will be used.
 * @return bool True if $user is authorized, otherwise false
 */
public function isAuthorized($user = null)
{
    $action = $this-&amp;gt;request-&amp;gt;param(&apos;action&apos;);
    if (in_array($action, $this-&amp;gt;adminActions)) {
        return true;
    }
    return parent::isAuthorized($user);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This should allow me access to the &lt;code&gt;OrdersController&lt;/code&gt;, which we will be shortly customizing via an &lt;code&gt;OrdersListener&lt;/code&gt; located in &lt;code&gt;plugins/PhotoPostType/src/Listener/OrdersListener.php&lt;/code&gt;. I’m going to bind that in our &lt;code&gt;OrdersController::initialize()&lt;/code&gt; method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$this-&amp;gt;Crud-&amp;gt;addListener(&apos;Orders&apos;, &apos;PhotoPostType\Listener\OrdersListener&apos;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And here is the skeleton for that class:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
namespace PhotoPostType\Listener;

use Cake\Event\Event;
use Crud\Listener\BaseListener;

/**
 * Orders Listener
 */
class OrdersListener extends BaseListener
{
    /**
     * Callbacks definition
     *
     * @return array
     */
    public function implementedEvents()
    {
        return [
            &apos;Crud.beforeHandle&apos; =&amp;gt; &apos;beforeHandle&apos;,
        ];
    }

    /**
     * Before Handle
     *
     * @param \Cake\Event\Event $event Event
     * @return void
     */
    public function beforeHandle(Event $event)
    {
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I’m going to save my state before I get too carried away&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add plugins/PhotoPostType/src/Controller/OrdersController.php plugins/PhotoPostType/src/Listener/OrdersListener.php
git commit -m &quot;Enable CrudView for the OrdersController&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;customizing-our-index-page&quot;&gt;Customizing our index page&lt;/h2&gt;

&lt;p&gt;Our index page is a bit special. Here is what I want to do:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Disable non-CrudView actions&lt;/li&gt;
  &lt;li&gt;Show a link to the &lt;code&gt;charge_id&lt;/code&gt; on stripe&lt;/li&gt;
  &lt;li&gt;Show a single, unified element for the contact information&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For the first item, we’ll want to add the following to our &lt;code&gt;OrdersController::initialize()&lt;/code&gt; method.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$this-&amp;gt;Crud-&amp;gt;config(&apos;actions.add&apos;, null);
$this-&amp;gt;Crud-&amp;gt;config(&apos;actions.edit&apos;, null);
$this-&amp;gt;Crud-&amp;gt;config(&apos;actions.view&apos;, null);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This completely disables the actions, while also ensuring that we don’t show any references to them in CrudView.&lt;/p&gt;

&lt;p&gt;Next, we’ll need to add the following to our &lt;code&gt;OrdersListener::beforeHandle()&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;if ($event-&amp;gt;subject-&amp;gt;action === &apos;index&apos;) {
    $this-&amp;gt;beforeHandleIndex($event);

    return;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the corresponding &lt;code&gt;OrdersListener::beforeHandleIndex()&lt;/code&gt; is as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;/**
 * Before Handle Index Action
 *
 * @param \Cake\Event\Event $event Event
 * @return void
 */
public function beforeHandleIndex(Event $event)
{
    $this-&amp;gt;_action()-&amp;gt;config(&apos;scaffold.fields&apos;, [
        &apos;id&apos;,
        &apos;chargeid&apos; =&amp;gt; [
            &apos;formatter&apos; =&amp;gt; &apos;element&apos;,
            &apos;element&apos; =&amp;gt; &apos;PhotoPostType.crud-view/index-chargeid&apos;,
        ],
        &apos;contact&apos; =&amp;gt; [
            &apos;formatter&apos; =&amp;gt; &apos;element&apos;,
            &apos;element&apos; =&amp;gt; &apos;PhotoPostType.crud-view/index-contact&apos;,
        ],
        &apos;shipped&apos; =&amp;gt; [
        ],
        &apos;created&apos; =&amp;gt; [
        ],
    ]);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Previously, we used an inline anonymous function to format the page. This works okay, but in this case we’re going to be doing a bit more work, so using an element seems more appropriate. Here is the contents of my &lt;code&gt;plugins/PhotoPostType/src/Template/Element/crud-view/index-contact.ctp&lt;/code&gt; template:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?= implode(&quot;&amp;lt;br&amp;gt;&quot;, array_filter([
    $context-&amp;gt;get(&apos;shipping_name&apos;),
    $context-&amp;gt;get(&apos;shipping_address_line_1&apos;),
    sprintf(
        &apos;%s, %s %s&apos;,
        $context-&amp;gt;get(&apos;shipping_address_city&apos;),
        $context-&amp;gt;get(&apos;shipping_address_state&apos;),
        $context-&amp;gt;get(&apos;shipping_address_zip&apos;)
    ),
    $context-&amp;gt;get(&apos;shipping_address_country&apos;),
    $context-&amp;gt;get(&apos;email&apos;),
]));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pretty straightforward. I’m basically getting all the contact info and splatting it together in one element. The &lt;code&gt;$context&lt;/code&gt; object is simply a reference to the entity being displayed.&lt;/p&gt;

&lt;p&gt;Our &lt;code&gt;plugins/PhotoPostType/src/Template/Element/crud-view/index-contact.ctp&lt;/code&gt; template is a bit more complex:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
use Cake\Core\Configure;

$mode = Configure::read(&apos;Stripe.mode&apos;);
if ($mode === &apos;live&apos;) {
    echo $this-&amp;gt;Html-&amp;gt;link($value, sprintf(&apos;https://dashboard.stripe.com/payments/&apos;. $value));
} else {
    echo $this-&amp;gt;Html-&amp;gt;link($value, sprintf(&apos;https://dashboard.stripe.com/test/payments/&apos;. $value));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Depending upon the stripe mode, we link to either the live or the test payment. I’ve also added the following to my &lt;code&gt;config/.env.default&lt;/code&gt; (and equivalent to &lt;code&gt;config/.env&lt;/code&gt;) to handle that new &lt;code&gt;Configure&lt;/code&gt; value.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;export STRIPE_MODE=test
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Assuming everything was configured properly, here is what that will look like:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/12/22/dashboard.png&quot; alt=&quot;dashboard confessional&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I’ll save my changes here.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add config/.env.default plugins/PhotoPostType/src/Controller/OrdersController.php plugins/PhotoPostType/src/Listener/OrdersListener.php plugins/PhotoPostType/src/Template/Element/crud-view/index-chargeid.ctp plugins/PhotoPostType/src/Template/Element/crud-view/index-contact.ctp
git commit -m &quot;Customize the OrdersController::index() action&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;adding-bulk-actions&quot;&gt;Adding bulk actions&lt;/h2&gt;

&lt;p&gt;Now that we have a custom admin panel, we’ll need to be able to mark things as shipped. We’ll be using the &lt;code&gt;Crud.Bulk/SetValue&lt;/code&gt; action class, which allows us to bulk update records and set a specific value. First, lets map the action in the &lt;code&gt;OrdersController::initialize()&lt;/code&gt; method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$this-&amp;gt;Crud-&amp;gt;mapAction(&apos;setShipped&apos;, [
    &apos;className&apos; =&amp;gt; &apos;Crud.Bulk/SetValue&apos;,
    &apos;field&apos; =&amp;gt; &apos;shipped&apos;,
]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We also need to add it to the list of allowed admin actions:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;/**
 * A list of actions where the CrudView.View
 * listener should be enabled. If an action is
 * in this list but `isAdmin` is false, the
 * action will still be rendered via CrudView.View
 *
 * @var array
 */
protected $adminActions = [&apos;index&apos;, &apos;delete&apos;, &apos;setShipped&apos;];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, we’ll want to configure the action itself. I’d like to be able to set the value as 0 or 1 (mapping to true or false in our database). I also need to properly configure the status message. Start by adding the following to &lt;code&gt;OrdersListener::beforeHandle()&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;if ($event-&amp;gt;subject-&amp;gt;action === &apos;setShipped&apos;) {
    $this-&amp;gt;beforeHandleSetShipped($event);

    return;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the &lt;code&gt;OrdersListener::beforeHandleSetShipped()&lt;/code&gt; method is as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;/**
 * Before Handle SetShipped Action
 *
 * @param \Cake\Event\Event $event Event
 * @return void
 */
public function beforeHandleSetShipped(Event $event)
{
    $value = (int)$this-&amp;gt;_request()-&amp;gt;query(&apos;shipped&apos;);
    if ($value !== 0 &amp;amp;&amp;amp; $value !== 1) {
        throw new BadRequestException(&apos;Invalid ship status specified&apos;);
    }

    $verb = &apos;shipped&apos;;
    if ($value === 0) {
        $verb = &apos;unshipped&apos;;
    }

    $this-&amp;gt;_action()-&amp;gt;config(&apos;value&apos;, $value);
    $this-&amp;gt;_action()-&amp;gt;config(&apos;messages.success.text&apos;, sprintf(&apos;Marked orders as %s!&apos;, $verb));
    $this-&amp;gt;_action()-&amp;gt;config(&apos;messages.error.text&apos;, sprintf(&apos;Could not mark orders as %s!&apos;, $verb));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lastly, we need to actually link to the bulk actions. You can configure this by adding the next 4 lines to your &lt;code&gt;OrdersListener::beforeHandleIndex()&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$this-&amp;gt;_action()-&amp;gt;config(&apos;scaffold.bulk_actions&apos;, [
    Router::url([&apos;action&apos; =&amp;gt; &apos;setShipped&apos;, &apos;shipped&apos; =&amp;gt; &apos;1&apos;]) =&amp;gt; __(&apos;Mark as shipped&apos;),
    Router::url([&apos;action&apos; =&amp;gt; &apos;setShipped&apos;, &apos;shipped&apos; =&amp;gt; &apos;0&apos;]) =&amp;gt; __(&apos;Mark as unshipped&apos;),
]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/12/22/dashboard-bulk.png&quot; alt=&quot;bulk dashboard confessional&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And we’re done!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add plugins/PhotoPostType/src/Controller/OrdersController.php plugins/PhotoPostType/src/Listener/OrdersListener.php
git commit -m &quot;Add bulk actions for modifying shipping status&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;For those that may just want to ensure their codebase matches what has been done so far, the codebase is available on GitHub and tagged as &lt;a href=&quot;https://github.com/josegonzalez/cakeadvent-2016/tree/0.0.22&quot;&gt;0.0.22&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We’re nearing the finish line. The only major items include notifying the primary user when a new order has come in, as well as notifying users when their items have been shipped. We could certainly add a contact form or about page to the frontend as well, though those can be homework exercises for you :)&lt;/p&gt;

&lt;p&gt;Be sure to follow along via twitter on &lt;a href=&quot;https://twitter.com/savant&quot;&gt;@savant&lt;/a&gt;. If you’d like to subscribe to this blog, you may follow the &lt;a href=&quot;/atom.xml&quot;&gt;rss feed here&lt;/a&gt;. Also, all posts in the series will be conveniently linked on the sidebar of every post in the 2016 CakeAdvent Calendar. Come back tomorrow for more delicious content.&lt;/p&gt;
</description>
        <pubDate>Thu, 22 Dec 2016 08:53:00 +0000</pubDate>
        <link>http://josediazgonzalez.com/2016/12/22/handling-photo-orders/</link>
        <guid isPermaLink="true">http://josediazgonzalez.com/2016/12/22/handling-photo-orders/</guid>
        
        <category>crud-view</category>
        
        <category>cakeadvent-2016</category>
        
        <category>cakephp</category>
        
        
        <category>cakephp</category>
        
      </item>
    
      <item>
        <title>Selling Photos</title>
        <description>&lt;p&gt;A friend of mine asked for a custom website, so here I am, writing a custom cms. I know, there are plenty of systems out there that would handle his needs, but it’s also a good excuse to play around with CakePHP 3, so here we are.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;For the lazy, the codebase we’ll be working on will be available on &lt;a href=&quot;https://github.com/josegonzalez/cakeadvent-2016&quot;&gt;GitHub&lt;/a&gt;. I will be pushing each set of changes on the date when each blog post in this series is published. No cheating!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;errata-from-previous-post&quot;&gt;Errata from previous post&lt;/h2&gt;

&lt;p&gt;There is a missing commit which removed the &lt;code&gt;-&amp;gt;layout(false)&lt;/code&gt; call in our &lt;code&gt;UserMailer&lt;/code&gt; class.&lt;/p&gt;

&lt;p&gt;Thanks to those who’ve pointed out my derp. These fixes are available as the first commit in the current release.&lt;/p&gt;

&lt;h2 id=&quot;allowing-paid-photos&quot;&gt;Allowing Paid Photos&lt;/h2&gt;

&lt;p&gt;Rather than making a whole new post type, we’re going to repurpose the existing Photo Post Type. First, lets add a &lt;code&gt;price&lt;/code&gt; field to our &lt;code&gt;PhotoPostType::_buildSchema()&lt;/code&gt; method.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$schema-&amp;gt;addField(&apos;price&apos;, [&apos;type&apos; =&amp;gt; &apos;text&apos;]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We also want to validate that any prices are positive numbers (we’re only allowing whole dollar amounts). I added the following to my &lt;code&gt;PhotoPostType::_buildValidator()&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$validator-&amp;gt;allowEmpty(&apos;price&apos;);
$validator-&amp;gt;add(&apos;price&apos;, &apos;numeric&apos;, [
    &apos;rule&apos; =&amp;gt; [&apos;naturalNumber&apos;, true]
]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Simple enough. We can now add pricing to our photos :)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add plugins/PhotoPostType/src/PostType/PhotoPostType.php
git commit -m &quot;Enable photo pricing&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;displaying-checkout-buttons-via-stripe&quot;&gt;Displaying Checkout Buttons via Stripe&lt;/h2&gt;

&lt;p&gt;We’ll be using Stripe to process payments. Install it via composer:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;composer require stripe/stripe-php
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In order to simplify our integration, we’ll be using their &lt;code&gt;checkout&lt;/code&gt; product. I created the element &lt;code&gt;src/Template/Element/stripe.ctp&lt;/code&gt; in order to contain the client-side portion of the integration:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
if (empty($post-&amp;gt;get(&apos;price&apos;))) {
    return;
}
?&amp;gt;

&amp;lt;div style=&quot;text-align:center;&quot;&amp;gt;
    &amp;lt;?= $this-&amp;gt;Form-&amp;gt;create(null, [&apos;class&apos; =&amp;gt; &apos;payment-form&apos;, &apos;url&apos; =&amp;gt; [&apos;plugin&apos; =&amp;gt; &apos;PhotoPostType&apos;, &apos;controller&apos; =&amp;gt; &apos;Orders&apos;, &apos;action&apos; =&amp;gt; &apos;order&apos;, &apos;id&apos; =&amp;gt; $post-&amp;gt;get(&apos;id&apos;)]]); ?&amp;gt;
        &amp;lt;script
            src=&quot;https://checkout.stripe.com/checkout.js&quot; class=&quot;stripe-button&quot;
            data-key=&quot;&amp;lt;?= \Cake\Core\Configure::read(&apos;Stripe.publishablekey&apos;) ?&amp;gt;&quot;
            data-amount=&quot;&amp;lt;?= $post-&amp;gt;getPriceInCents() ?&amp;gt;&quot;
            data-name=&quot;&amp;lt;?= \Cake\Core\Configure::read(&apos;App.name&apos;) ?&amp;gt;&quot;
            data-description=&quot;&amp;lt;?= $post-&amp;gt;get(&apos;title&apos;) ?&amp;gt;&quot;
            data-image=&quot;https://stripe.com/img/documentation/checkout/marketplace.png&quot;
            data-locale=&quot;auto&quot;
            data-zip-code=&quot;true&quot;
            data-billing-address=&quot;true&quot;
            data-shipping-address=&quot;true&quot;
            data-label=&quot;Buy this photo&quot;&amp;gt;
          &amp;lt;/script&amp;gt;
    &amp;lt;?= $this-&amp;gt;Form-&amp;gt;end(); ?&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above form uses the converted &lt;code&gt;PostType&lt;/code&gt; object to configure the button. We’ll need two new environment variables though, which you can retrieve from your stripe dashboard:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;export STRIPE_PUBLISHABLEKEY=pk_test_1234
export STRIPE_SECRETKEY=sk_test_abcd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can include this element in your &lt;code&gt;photo-view.ctp&lt;/code&gt; files like so:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?= $this-&amp;gt;element(&apos;stripe&apos;, [&apos;post&apos; =&amp;gt; $post]); ?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One tricky thing about stripe is that the amount it accepts is a number in cents, not whole dollars, so we need to add the following to our &lt;code&gt;PhotoPostType&lt;/code&gt; class to make the conversion:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;public function getPriceInCents()
{
    $price = $this-&amp;gt;get(&apos;price&apos;);
    if (empty($price)) {
        return 0;
    }

    return $price * 100;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This takes care of most of the user-facing integration, so we’ll save our work for now:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add composer.json composer.lock config/.env.default plugins/DefaultTheme/src/Template/Element/post_type/photo-view.ctp plugins/PhotoPostType/src/PostType/PhotoPostType.php plugins/PhotoPostType/src/Template/Element/post_type/photo-view.ctp src/Template/Element/stripe.ctp
git commit -m &quot;Implement user-facing portion of stripe integration&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;processing-payments&quot;&gt;Processing Payments&lt;/h2&gt;

&lt;p&gt;We’ll be storing order information in a new table. This is the migration I generated:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;bin/cake bake migration --plugin PhotoPostType create_orders charge_id email shipping_name shipping_address_line_1 shipping_address_zip shipping_address_state shipping_address_city shipping_address_country shipped:boolean created modified
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I had to modify the default for &lt;code&gt;shipped&lt;/code&gt; to be &lt;code&gt;false&lt;/code&gt; in the generated migration file. We can now run it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;bin/cake migrations migrate --plugin PhotoPostType
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since I want composer to run this automatically when the application is “compiled”, I added the following to &lt;code&gt;scripts.compile&lt;/code&gt; in my &lt;code&gt;composer.json&lt;/code&gt; file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;&quot;bin/cake migrations migrate -p PhotoPostType&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can generate tables for this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;bin/cake bake model Orders --plugin PhotoPostType
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On the server-side, we’ll need an &lt;code&gt;OrdersController::order()&lt;/code&gt; action to handle the actual payments. Here is the initial scaffolding for that:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
namespace PhotoPostType\Controller;

use Cake\Core\Configure;
use PhotoPostType\Controller\AppController;
use Stripe\Error\Card as CardError;
use Stripe\Charge;
use Stripe\Customer;
use Stripe\Stripe;

class OrdersController extends AppController
{
    /**
     * Initialization hook method.
     *
     * Use this method to add common initialization code like loading components.
     *
     * e.g. `$this-&amp;gt;loadComponent(&apos;Security&apos;);`
     *
     * @return void
     */
    public function initialize()
    {
        parent::initialize();
        $this-&amp;gt;Auth-&amp;gt;allow(&apos;order&apos;);
    }

    /**
     * Order action
     *
     * @return void
     */
    public function order()
    {
        $this-&amp;gt;loadModel(&apos;Posts&apos;);
        $post = $this-&amp;gt;Posts-&amp;gt;find()
                           -&amp;gt;where([&apos;id&apos; =&amp;gt; $this-&amp;gt;request-&amp;gt;query(&apos;id&apos;)])
                           -&amp;gt;contain(&apos;PostAttributes&apos;)
                           -&amp;gt;first()
                           -&amp;gt;getPostType();

        $charge = $this-&amp;gt;chargeCard($post-&amp;gt;getPriceInCents());
        if (empty($charge)) {
            $this-&amp;gt;Flash-&amp;gt;error(__(&apos;Your card was declined&apos;));
            return $this-&amp;gt;redirect($this-&amp;gt;referer(&apos;/&apos;, true));
        }

        $this-&amp;gt;createOrder($charge);
        $this-&amp;gt;Flash-&amp;gt;success(__(&apos;Order placed! Check your email for more details :)&apos;));
        return $this-&amp;gt;redirect($this-&amp;gt;referer(&apos;/&apos;, true));
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A few notes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I’m allowing the &lt;code&gt;order&lt;/code&gt; action. This is necessary as we have default denied requests to all actions in our &lt;code&gt;AppController&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;We need to retrieve the post being requested as a post-type, hence the find at the beginning.&lt;/li&gt;
  &lt;li&gt;There isn’t too much error handling, but you can expand this to suit your needs.&lt;/li&gt;
  &lt;li&gt;This should be refactored as a custom Form class, but it’s here because I am lazy.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is the contents of my &lt;code&gt;OrdersController::chargeCard()&lt;/code&gt; method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;/**
 * Order action
 *
 * @return null|\Stripe\Charge
 */
protected function chargeCard($amount)
{
    Stripe::setApiKey(Configure::read(&apos;Stripe.secretkey&apos;));
    try {
        $customer = Customer::create(array(
            &apos;email&apos; =&amp;gt; $this-&amp;gt;request-&amp;gt;data(&apos;stripeEmail&apos;),
            &apos;card&apos;  =&amp;gt; $this-&amp;gt;request-&amp;gt;data(&apos;stripeToken&apos;)
        ));
        return Charge::create(array(
            &apos;customer&apos; =&amp;gt; $customer-&amp;gt;id,
            &apos;amount&apos;   =&amp;gt; $amount,
            &apos;currency&apos; =&amp;gt; &apos;usd&apos;
        ));
    } catch (CardError $e) {
        $this-&amp;gt;log($e);
        return null;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pretty straightforward. We need to create a customer in stripe and then charge the card. If we get any card authentication errors, we log it for inspection and don’t return the charge. My &lt;code&gt;OrdersController::createOrder()&lt;/code&gt; method is as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;/**
 * Order action
 *
 * @return null|\Stripe\Charge
 */
protected function createOrder($charge)
{
    $data = [
        &apos;chargeid&apos; =&amp;gt; $charge-&amp;gt;id,
        &apos;email&apos; =&amp;gt; $this-&amp;gt;request-&amp;gt;data(&apos;stripeEmail&apos;),
        &apos;shipping_name&apos; =&amp;gt; $this-&amp;gt;request-&amp;gt;data(&apos;stripeShippingName&apos;),
        &apos;shipping_address_line_1&apos; =&amp;gt; $this-&amp;gt;request-&amp;gt;data(&apos;stripeShippingAddressLine1&apos;),
        &apos;shipping_address_zip&apos; =&amp;gt; $this-&amp;gt;request-&amp;gt;data(&apos;stripeShippingAddressZip&apos;),
        &apos;shipping_address_state&apos; =&amp;gt; $this-&amp;gt;request-&amp;gt;data(&apos;stripeShippingAddressState&apos;),
        &apos;shipping_address_city&apos; =&amp;gt; $this-&amp;gt;request-&amp;gt;data(&apos;stripeShippingAddressCity&apos;),
        &apos;shipping_address_country&apos; =&amp;gt; $this-&amp;gt;request-&amp;gt;data(&apos;stripeShippingAddressCountry&apos;),
        &apos;shipped&apos; =&amp;gt; false,
    ];

    $order = $this-&amp;gt;Orders-&amp;gt;newEntity($data);
    if (!$this-&amp;gt;Orders-&amp;gt;save($order)) {
        $this-&amp;gt;log($order-&amp;gt;errors());
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We’re just taking the charge and the submitted data and saving it as an order.&lt;/p&gt;

&lt;p&gt;Now we need to enable routing for this controller action. I created the &lt;code&gt;plugins/PhotoPostType/config/routes.php&lt;/code&gt; with the following contents:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
use Cake\Core\Configure;
use Cake\Routing\Router;
use Cake\Routing\Route\DashedRoute;

$routeClass = Configure::read(&apos;PhotoPostType.Routes.routeClass&apos;);
$routeClass = $routeClass ?: DashedRoute::class;

$photoPostTypePrefix = Configure::read(&apos;PhotoPostType.Routes.prefix&apos;);
$photoPostTypePrefix = $photoPostTypePrefix ?: &apos;/order&apos;;
$photoPostTypePrefix = &apos;/&apos; . trim($photoPostTypePrefix, &quot;\t\n\r\0\x0B/&quot;);
Router::plugin(&apos;PhotoPostType&apos;, [&apos;path&apos; =&amp;gt; $photoPostTypePrefix], function ($routes) use ($routeClass) {
    $routes-&amp;gt;connect(
        &apos;/&apos;,
        [&apos;controller&apos; =&amp;gt; &apos;Orders&apos;, &apos;action&apos; =&amp;gt; &apos;order&apos;],
        [&apos;id&apos; =&amp;gt; &apos;\d+&apos;, &apos;pass&apos; =&amp;gt; [&apos;id&apos;], &apos;routeClass&apos; =&amp;gt; $routeClass]
    );
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We also need to load the routes for this plugin in our &lt;code&gt;config/bootstrap.php&lt;/code&gt;. Replace the line loading the &lt;code&gt;PhotoPostType&lt;/code&gt; plugin with the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;Plugin::load(&apos;PhotoPostType&apos;, [&apos;bootstrap&apos; =&amp;gt; true, &apos;routes&apos; =&amp;gt; true]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lastly, I added a bit of css to &lt;code&gt;plugins/DefaultTheme/webroot/css/style.css&lt;/code&gt; to show off our flash styling.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.message {
    text-align: center;
}
.message.success {
    background-color: lightgreen;
}
.message.error {
    background-color: #D33C44;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you can try it out on any user-facing post page. You should get a message like the following:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/12/21/sold.png&quot; alt=&quot;awh yis&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Commit your changes :)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add composer.json config/bootstrap.php plugins/DefaultTheme/webroot/css/style.css plugins/PhotoPostType/config/Migrations/20161222013607_CreateOrders.php plugins/PhotoPostType/config/routes.php plugins/PhotoPostType/src/Controller/OrdersController.php plugins/PhotoPostType/src/Model/Entity/Order.php plugins/PhotoPostType/src/Model/Table/OrdersTable.php plugins/PhotoPostType/tests/Fixture/OrdersFixture.php plugins/PhotoPostType/tests/TestCase/Model/Table/OrdersTableTest.php
git commit -m &quot;Implement payment processing&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;For those that may just want to ensure their codebase matches what has been done so far, the codebase is available on GitHub and tagged as &lt;a href=&quot;https://github.com/josegonzalez/cakeadvent-2016/tree/0.0.21&quot;&gt;0.0.21&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Our CMS is pretty complete. We’ve got a few odds and ends to tie up - like showing off orders in the admin and notifying users of their order and when it’s shipped - but we’re done for today.&lt;/p&gt;

&lt;p&gt;Be sure to follow along via twitter on &lt;a href=&quot;https://twitter.com/savant&quot;&gt;@savant&lt;/a&gt;. If you’d like to subscribe to this blog, you may follow the &lt;a href=&quot;/atom.xml&quot;&gt;rss feed here&lt;/a&gt;. Also, all posts in the series will be conveniently linked on the sidebar of every post in the 2016 CakeAdvent Calendar. Come back tomorrow for more delicious content.&lt;/p&gt;
</description>
        <pubDate>Wed, 21 Dec 2016 17:19:00 +0000</pubDate>
        <link>http://josediazgonzalez.com/2016/12/21/selling-photos/</link>
        <guid isPermaLink="true">http://josediazgonzalez.com/2016/12/21/selling-photos/</guid>
        
        <category>payments</category>
        
        <category>stripe</category>
        
        <category>cakeadvent-2016</category>
        
        <category>cakephp</category>
        
        
        <category>cakephp</category>
        
      </item>
    
      <item>
        <title>Sending Responsive Emails</title>
        <description>&lt;p&gt;A friend of mine asked for a custom website, so here I am, writing a custom cms. I know, there are plenty of systems out there that would handle his needs, but it’s also a good excuse to play around with CakePHP 3, so here we are.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;For the lazy, the codebase we’ll be working on will be available on &lt;a href=&quot;https://github.com/josegonzalez/cakeadvent-2016&quot;&gt;GitHub&lt;/a&gt;. I will be pushing each set of changes on the date when each blog post in this series is published. No cheating!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;email-previewing&quot;&gt;Email Previewing&lt;/h2&gt;

&lt;p&gt;One thing that has always annoyed me about developing emails within an application is that the preview step is pretty manual. I do agree that all emails should be seen in the actual email clients - all clients render at least slightly differently - but I personally hate the following workflow:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Update email&lt;/li&gt;
  &lt;li&gt;Send test email to client&lt;/li&gt;
  &lt;li&gt;Wait until client has received the email&lt;/li&gt;
  &lt;li&gt;Check email&lt;/li&gt;
  &lt;li&gt;Repeat until done&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It’s sort of annoying to go through, and not very nice for rapid application development. Fortunately, there is a solution! We’ll use my &lt;a href=&quot;https://github.com/josegonzalez/cakephp-mail-preview&quot;&gt;MailPreview&lt;/a&gt; plugin to shorten the development cycle significantly. Start off my installing it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;composer require josegonzalez/cakephp-mail-preview
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, we’ll want to load the plugin (and it’s routes):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;bin/cake plugin load Josegonzalez/MailPreview --routes
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;MailPreview&lt;/code&gt; plugin integrates with the CakePHP &lt;code&gt;Mailer&lt;/code&gt; class, but currently requires a single addition to get previews going. We’ll need to add the following &lt;code&gt;use&lt;/code&gt; statement to &lt;code&gt;UserMailer&lt;/code&gt; class declaration:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;use Josegonzalez\MailPreview\Mailer\PreviewTrait;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And we’ll need to add the trait usage &lt;em&gt;inside&lt;/em&gt; of the class:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;use PreviewTrait;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can create a &lt;code&gt;MailPreview&lt;/code&gt; class for our &lt;code&gt;UserMailer&lt;/code&gt;. Think of the &lt;code&gt;MailPreview&lt;/code&gt; class as a type of fixture, except it provides testing data for emails instead of databases. I’ll create a &lt;code&gt;UserMailPreview&lt;/code&gt; in &lt;code&gt;src/Mailer/Preview/UserMailPreview.php&lt;/code&gt; with the following contents:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
namespace App\Mailer\Preview;

use Josegonzalez\MailPreview\Mailer\Preview\MailPreview;

class UserMailPreview extends MailPreview
{
    public function forgotPassword()
    {
        return $this-&amp;gt;getMailer(&apos;User&apos;)
                    -&amp;gt;preview(&apos;forgotPassword&apos;, [
                        &apos;example@example.com&apos;,
                        &apos;some-test-token&apos;
                    ]);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The usage is pretty straightforward. The &lt;code&gt;PreviewTrait&lt;/code&gt; adds a &lt;code&gt;preview()&lt;/code&gt; method to the Mailer, which takes in the name of the email and the arguments to send that email. The return is then used to show what the email looks like on screen.&lt;/p&gt;

&lt;p&gt;In order to display the previews, we’ll need to allow the actions if the controller is the &lt;code&gt;MailPreviewController&lt;/code&gt;. I added the following to my &lt;code&gt;AppController::initialize()&lt;/code&gt; method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;if ($this-&amp;gt;request-&amp;gt;params[&apos;controller&apos;] == &apos;MailPreview&apos;) {
    $this-&amp;gt;Auth-&amp;gt;allow();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you browse to &lt;code&gt;/mail-preview&lt;/code&gt;, you will see a list of your mailers and the emails they contain. If you click on one, you’ll get a weird routing error. Why? Because we are in a plugin, all urls are scoped to this plugin, and since the urls in question are not mapped, boom goes the email. Fix that by adding &lt;code&gt;&apos;plugin&apos; =&amp;gt; null&lt;/code&gt; to the urls in your &lt;code&gt;forgot_password.ctp&lt;/code&gt; templates, and you should see the following in your browser:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/12/20/email-preview.png&quot; alt=&quot;email preview&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Always be explicit about your urls!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Pretty good, right? Now we can work on our email to our hearts content! We’ll save our progress here.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add composer.json composer.lock config/bootstrap.php src/Controller/AppController.php src/Mailer/UserMailer.php src/Template/Email/html/forgot_password.ctp src/Template/Email/text/forgot_password.ctp src/Mailer/Preview/
git commit -m &quot;Setup email previews&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;displaying-a-responsive-email&quot;&gt;Displaying a Responsive Email&lt;/h2&gt;

&lt;p&gt;I more or less am going to grab the layout template from &lt;a href=&quot;https://github.com/leemunroe/responsive-html-email-template&quot;&gt;leemunroe/responsive-html-email-template&lt;/a&gt; with a few minor tweaks:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Replaced the &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt; element contents with &lt;code&gt;&amp;lt;?= $this-&amp;gt;fetch(&apos;title&apos;) ?&amp;gt;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Replaced the body with &lt;code&gt;&amp;lt;?= $this-&amp;gt;fetch(&apos;content&apos;) ?&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can modify the email otherwise however you see fit. I placed mine in &lt;code&gt;src/Template/Layout/Email/html/default.ctp&lt;/code&gt;. In order to load this layout, I removed &lt;code&gt;-&amp;gt;layout(false)&lt;/code&gt; from my &lt;code&gt;UserMailer::forgotPassword()&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;With a few minor changes, my email now looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/12/20/better-email-preview.png&quot; alt=&quot;better email preview&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I’ll save my work for now, but here are a few ideas to try:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Setup some sort of email unsubscribe flow.&lt;/li&gt;
  &lt;li&gt;Add images or backgrounds to your emails.&lt;/li&gt;
  &lt;li&gt;Create an &lt;code&gt;EmailHelper&lt;/code&gt; to make adding buttons etc. easier.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add src/Mailer/UserMailer.php src/Template/Email/html/forgot_password.ctp src/Template/Layout/Email/html/default.ctp
git commit -m &quot;Nicer html email layout&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;For those that may just want to ensure their codebase matches what has been done so far, the codebase is available on GitHub and tagged as &lt;a href=&quot;https://github.com/josegonzalez/cakeadvent-2016/tree/0.0.20&quot;&gt;0.0.20&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Looks like I lied about what we were going to work on today, but I wanted to go back and show off a neat development feature I’d been working on. I think the results speak for themselves, and hope it was a worthwhile trip. Tomorrow we’ll &lt;em&gt;actually&lt;/em&gt; work on selling photos.&lt;/p&gt;

&lt;p&gt;Be sure to follow along via twitter on &lt;a href=&quot;https://twitter.com/savant&quot;&gt;@savant&lt;/a&gt;. If you’d like to subscribe to this blog, you may follow the &lt;a href=&quot;/atom.xml&quot;&gt;rss feed here&lt;/a&gt;. Also, all posts in the series will be conveniently linked on the sidebar of every post in the 2016 CakeAdvent Calendar. Come back tomorrow for more delicious content.&lt;/p&gt;
</description>
        <pubDate>Tue, 20 Dec 2016 07:02:00 +0000</pubDate>
        <link>http://josediazgonzalez.com/2016/12/20/sending-responsive-emails/</link>
        <guid isPermaLink="true">http://josediazgonzalez.com/2016/12/20/sending-responsive-emails/</guid>
        
        <category>emails</category>
        
        <category>email-preview</category>
        
        <category>cakeadvent-2016</category>
        
        <category>cakephp</category>
        
        
        <category>cakephp</category>
        
      </item>
    
      <item>
        <title>Cosmetic Admin Cleanup</title>
        <description>&lt;p&gt;A friend of mine asked for a custom website, so here I am, writing a custom cms. I know, there are plenty of systems out there that would handle his needs, but it’s also a good excuse to play around with CakePHP 3, so here we are.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;For the lazy, the codebase we’ll be working on will be available on &lt;a href=&quot;https://github.com/josegonzalez/cakeadvent-2016&quot;&gt;GitHub&lt;/a&gt;. I will be pushing each set of changes on the date when each blog post in this series is published. No cheating!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;errata-from-previous-post&quot;&gt;Errata from previous post&lt;/h2&gt;

&lt;p&gt;The connected routes in &lt;code&gt;config/routes.php&lt;/code&gt; for &lt;code&gt;/forgot-password&lt;/code&gt; and &lt;code&gt;/reset-password&lt;/code&gt; were incorrect and should be as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$routes-&amp;gt;connect(&apos;/forgot-password&apos;, [&apos;controller&apos; =&amp;gt; &apos;Users&apos;, &apos;action&apos; =&amp;gt; &apos;forgotPassword&apos;]);
$routes-&amp;gt;connect(&apos;/reset-password/*&apos;, [&apos;controller&apos; =&amp;gt; &apos;Users&apos;, &apos;action&apos; =&amp;gt; &apos;resetPassword&apos;]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Thanks to those who’ve pointed out my derps. These fixes are available as the first commit in the current release.&lt;/p&gt;

&lt;h2 id=&quot;cosmetic-cleanup&quot;&gt;Cosmetic Cleanup&lt;/h2&gt;

&lt;p&gt;There are a few things that currently irk me about the admin panel:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We are duplicating navigation in the header and sidebar&lt;/li&gt;
  &lt;li&gt;The default header link on the top-right when logged out is the &lt;code&gt;logout&lt;/code&gt; link.&lt;/li&gt;
  &lt;li&gt;The login redirect goes to &lt;code&gt;/&lt;/code&gt;, when it should go to the &lt;code&gt;/admin/posts&lt;/code&gt; page. The logout redirect should just go to the logout page.&lt;/li&gt;
  &lt;li&gt;We’re showing a link to the &lt;code&gt;view&lt;/code&gt; action on the &lt;code&gt;/admin/posts&lt;/code&gt; page but we should not.&lt;/li&gt;
  &lt;li&gt;We’re showing a link to the &lt;code&gt;home&lt;/code&gt; action on the &lt;code&gt;/admin/posts/edit&lt;/code&gt; page but we should not.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s fix that.&lt;/p&gt;

&lt;h3 id=&quot;de-duplicating-navigation-links&quot;&gt;De-duplicating Navigation Links&lt;/h3&gt;

&lt;p&gt;We can very easily combine our navigation by modifying the &lt;code&gt;scaffold.utility_navigation&lt;/code&gt; crud config option to include the &lt;code&gt;scaffold.sidebar_navigation&lt;/code&gt; elements. I’m going to refactor this into a helper method in our &lt;code&gt;AppController&lt;/code&gt; class:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;/**
 * Retrieves the navigation elements for the page
 *
 * @return array
 */
protected function getUtilityNavigation()
{
    return [
        new \CrudView\Menu\MenuItem(
            &apos;Posts&apos;,
            [&apos;controller&apos; =&amp;gt; &apos;Posts&apos;, &apos;action&apos; =&amp;gt; &apos;index&apos;]
        ),
        new \CrudView\Menu\MenuItem(
            &apos;Profile&apos;,
            [&apos;controller&apos; =&amp;gt; &apos;Users&apos;, &apos;action&apos; =&amp;gt; &apos;edit&apos;]
        ),
        new \CrudView\Menu\MenuItem(
            &apos;Log Out&apos;,
            [&apos;controller&apos; =&amp;gt; &apos;Users&apos;, &apos;action&apos; =&amp;gt; &apos;logout&apos;]
        )
    ];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, we can update our &lt;code&gt;AppController::beforeFilter()&lt;/code&gt; to remove the &lt;code&gt;scaffold.sidebar_navigation&lt;/code&gt; and &lt;code&gt;scaffold.tables_blacklist&lt;/code&gt; configuration, replacing it with&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$this-&amp;gt;Crud-&amp;gt;action()-&amp;gt;config(&apos;scaffold.utility_navigation&apos;, $this-&amp;gt;getUtilityNavigation());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will move our navigation to the top, but will also re-enable the default sidebar. Let’s fix that next. For now, commit our changes:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add src/Controller/AppController.php
git commit -m &quot;Move sidebar navigation to header&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;disabling-the-sidebar&quot;&gt;Disabling the Sidebar&lt;/h3&gt;

&lt;p&gt;This is pretty simple. We’ve already done this for a few actions in the &lt;code&gt;UsersController&lt;/code&gt;, but we’ll want to do this more globally. Add the following line to your &lt;code&gt;AppController::beforeFilter()&lt;/code&gt;, in the block checking if &lt;code&gt;Crud::isActionMapped()&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$this-&amp;gt;Crud-&amp;gt;action()-&amp;gt;config(&apos;scaffold.sidebar_navigation&apos;, false);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now your entire page layout should be taken up by the contents of the view, sans sidebar.&lt;/p&gt;

&lt;p&gt;You can also remove this setting from your &lt;code&gt;UsersListener&lt;/code&gt;, as we are handling it globally now. The following methods will be updated:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;UsersListener::beforeHandleLogin()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;UsersListener::beforeHandleResetPassword()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;UsersListener::beforeHandleForgotPassword()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Time to commit:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add src/Controller/AppController.php src/Listener/UsersListener.php
git commit -m &quot;Disable the sidebar navigation completely&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;switching-header-links-for-logged-out-users&quot;&gt;Switching header links for logged out users&lt;/h3&gt;

&lt;p&gt;We should almost certainly not be showing the “Posts”, “Profile”, and “Log Out” utility navigation links to logged out users. Instead, lets show a link to login and start the forgot password flow to logged out users. I added the following to the beginning of my &lt;code&gt;AppController::getUtilityNavigation()&lt;/code&gt; method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;if ($this-&amp;gt;Auth-&amp;gt;user(&apos;id&apos;) === null) {
    return [
        new \CrudView\Menu\MenuItem(
            &apos;Forgot Password?&apos;,
            [&apos;controller&apos; =&amp;gt; &apos;Users&apos;, &apos;action&apos; =&amp;gt; &apos;forgotPassword&apos;]
        ),
        new \CrudView\Menu\MenuItem(
            &apos;Login&apos;,
            [&apos;controller&apos; =&amp;gt; &apos;Users&apos;, &apos;action&apos; =&amp;gt; &apos;login&apos;]
        ),
    ];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nothing obtuse here, it’s all pretty straightforward. We’ll commit our changes&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add src/Controller/AppController.php
git commit -m &quot;Show alternative utility navigation to logged out users&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;fixing-the-loginlogout-redirects&quot;&gt;Fixing the login/logout redirects&lt;/h3&gt;

&lt;p&gt;This is just a matter of changing configuration in our &lt;code&gt;AppController::loadAuthComponent()&lt;/code&gt;, and very specifically the &lt;code&gt;loginRedirect&lt;/code&gt; and &lt;code&gt;logoutRedirect&lt;/code&gt; configuration options. Here is the full method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;/**
 * Configures the AuthComponent
 *
 * @return void
 */
protected function loadAuthComponent()
{
    $this-&amp;gt;loadComponent(&apos;Auth&apos;, [
        &apos;authorize&apos; =&amp;gt; [&apos;Controller&apos;],
        &apos;loginAction&apos; =&amp;gt; [
            &apos;plugin&apos; =&amp;gt; null,
            &apos;prefix&apos; =&amp;gt; false,
            &apos;controller&apos; =&amp;gt; &apos;Users&apos;,
            &apos;action&apos; =&amp;gt; &apos;login&apos;
        ],
        &apos;loginRedirect&apos; =&amp;gt; [
            &apos;plugin&apos; =&amp;gt; null,
            &apos;prefix&apos; =&amp;gt; false,
            &apos;controller&apos; =&amp;gt; &apos;Posts&apos;,
            &apos;action&apos; =&amp;gt; &apos;index&apos;,
        ],
        &apos;logoutRedirect&apos; =&amp;gt; [
            &apos;plugin&apos; =&amp;gt; null,
            &apos;prefix&apos; =&amp;gt; false,
            &apos;controller&apos; =&amp;gt; &apos;Users&apos;,
            &apos;action&apos; =&amp;gt; &apos;login&apos;,
        ],
        &apos;authenticate&apos; =&amp;gt; [
            &apos;all&apos; =&amp;gt; [
                &apos;fields&apos; =&amp;gt; [&apos;username&apos; =&amp;gt; &apos;email&apos;, &apos;password&apos; =&amp;gt; &apos;password&apos;],
            ],
            &apos;Form&apos;,
        ]
    ]);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You know the drill, save your changes:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add src/Controller/AppController.php
git commit -m &quot;Properly redirect users on login/logout&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;removing-the-view-link-from-our-post-action-list&quot;&gt;Removing the &lt;code&gt;view&lt;/code&gt; link from our post action list&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;scaffold.actions_blacklist&lt;/code&gt; Crud config option can be used to remove an action from being linked to. We’ll add the following to our &lt;code&gt;PostsListener::beforeHandleIndex()&lt;/code&gt; method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$this-&amp;gt;_action()-&amp;gt;config(&apos;scaffold.actions_blacklist&apos;, [
    &apos;view&apos;,
]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yay commit!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add src/Listener/PostsListener.php
git commit -m &quot;Disable the view action link&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;removing-the-home-link-from-our-post-action-list&quot;&gt;Removing the &lt;code&gt;home&lt;/code&gt; link from our post action list&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;scaffold.actions_blacklist&lt;/code&gt; Crud config option can be used to remove an action from being linked to. Add the following to our &lt;code&gt;PostsListener::beforeHandleEdit()&lt;/code&gt; method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;/**
 * Before Handle Edit Action
 *
 * @param \Cake\Event\Event $event Event
 * @return void
 */
public function beforeHandleEdit(Event $event)
{
    $this-&amp;gt;_action()-&amp;gt;config(&apos;scaffold.actions_blacklist&apos;, [
        &apos;home&apos;,
    ]);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We’ll need to add the following to &lt;code&gt;PostsListener::beforeHandle()&lt;/code&gt; in order to trigger this as well:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;if ($this-&amp;gt;_request()-&amp;gt;action === &apos;edit&apos;) {
    $this-&amp;gt;beforeHandleEdit($event);

    return;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Be sure to save your changes&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add src/Listener/PostsListener.php
git commit -m &quot;Disable the home action link&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;For those that may just want to ensure their codebase matches what has been done so far, the codebase is available on GitHub and tagged as &lt;a href=&quot;https://github.com/josegonzalez/cakeadvent-2016/tree/0.0.19&quot;&gt;0.0.19&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Our admin panel is in pretty good shape now - we could certainly try and spruce up the edit page for photo posts, but we’ll leave that for another day. Tomorrow, we’ll try add “sellable” photos to our CMS.&lt;/p&gt;

&lt;p&gt;Be sure to follow along via twitter on &lt;a href=&quot;https://twitter.com/savant&quot;&gt;@savant&lt;/a&gt;. If you’d like to subscribe to this blog, you may follow the &lt;a href=&quot;/atom.xml&quot;&gt;rss feed here&lt;/a&gt;. Also, all posts in the series will be conveniently linked on the sidebar of every post in the 2016 CakeAdvent Calendar. Come back tomorrow for more delicious content.&lt;/p&gt;
</description>
        <pubDate>Mon, 19 Dec 2016 11:31:00 +0000</pubDate>
        <link>http://josediazgonzalez.com/2016/12/19/admin-cleanup/</link>
        <guid isPermaLink="true">http://josediazgonzalez.com/2016/12/19/admin-cleanup/</guid>
        
        <category>crud-view</category>
        
        <category>cakeadvent-2016</category>
        
        <category>cakephp</category>
        
        
        <category>cakephp</category>
        
      </item>
    
      <item>
        <title>Queuing up emails</title>
        <description>&lt;p&gt;A friend of mine asked for a custom website, so here I am, writing a custom cms. I know, there are plenty of systems out there that would handle his needs, but it’s also a good excuse to play around with CakePHP 3, so here we are.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;For the lazy, the codebase we’ll be working on will be available on &lt;a href=&quot;https://github.com/josegonzalez/cakeadvent-2016&quot;&gt;GitHub&lt;/a&gt;. I will be pushing each set of changes on the date when each blog post in this series is published. No cheating!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;emailing-in-the-background&quot;&gt;Emailing in the Background&lt;/h2&gt;

&lt;p&gt;One thing you may notice is that sending the “forgot password” email causes the site to slow down. There are a few things to think about here:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Users will get upset if their requests don’t complete “instantly”.&lt;/li&gt;
  &lt;li&gt;Google will actually penalize slower sites in their rankings&lt;/li&gt;
  &lt;li&gt;If you perform more work in a web request, those requests can build up, potentially allowing users to DDoS you.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Overall, it’s pretty jank to send emails in the foreground. We’ll instead queue the messages to be sent in the background using the &lt;a href=&quot;https://github.com/josegonzalez/cakephp-queuesadilla&quot;&gt;&lt;code&gt;josegonzalez/cakephp-queuesadilla&lt;/code&gt;&lt;/a&gt; plugin which is included with the &lt;code&gt;josegonzalez/app&lt;/code&gt; skeleton we are using.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;CakePHP does not yet have an official queueing library, though we hope to have one soon. My hope is that it will be a slightly repackaged Queuesadilla.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;creating-a-job-class&quot;&gt;Creating a Job class&lt;/h3&gt;

&lt;p&gt;We’ll start by creating a generic &lt;code&gt;MailerJob&lt;/code&gt; class in &lt;code&gt;src/Job/MailerJob.php&lt;/code&gt;. Here is the contents of that file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
namespace App\Job;

use Cake\Log\LogTrait;
use Cake\Mailer\MailerAwareTrait;
use josegonzalez\Queuesadilla\Job\Base as JobContainer;

class MailerJob
{
    use LogTrait;
    use MailerAwareTrait;

    public function execute(JobContainer $job)
    {
        $mailer = $job-&amp;gt;data(&apos;mailer&apos;);
        $action = $job-&amp;gt;data(&apos;action&apos;);
        $data = $job-&amp;gt;data(&apos;data&apos;, []);

        if (empty($mailer)) {
            $this-&amp;gt;log(&apos;Missing mailer in job config&apos;);
            return;
        }

        if (empty($action)) {
            $this-&amp;gt;log(&apos;Missing action in job config&apos;);
            return;
        }

        $this-&amp;gt;getMailer($mailer)-&amp;gt;send($action, $data);
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Briefly, we’ll go over this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Jobs can be either functions, static methods in classes, or instances with a method that we execute. We are going for the instance methodology.&lt;/li&gt;
  &lt;li&gt;When a job method is executed, we pass in a &lt;code&gt;JobContainer&lt;/code&gt; which has access to the relevant job data.&lt;/li&gt;
  &lt;li&gt;We still use the &lt;code&gt;MailerAwareTrait&lt;/code&gt; so that we can reuse our &lt;code&gt;Mailer&lt;/code&gt; classes.&lt;/li&gt;
  &lt;li&gt;The &lt;code&gt;MailerJob::execute()&lt;/code&gt; method has been made generic so that we might be able to reuse this job for other cases where we’ll send email.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;queuing-the-mailerjob&quot;&gt;Queuing the &lt;code&gt;MailerJob&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;This is relatively simple. We’ll start by removing all &lt;code&gt;MailerAwareTrait&lt;/code&gt; code from our &lt;code&gt;UsersListener&lt;/code&gt;. In particular, remove the following &lt;code&gt;use&lt;/code&gt; statement:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;use Cake\Mailer\MailerAwareTrait;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As well as the following from within the class:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;use MailerAwareTrait;

/**
 * Default config for this object.
 *
 * @var array
 */
protected $_defaultConfig = [
    &apos;mailer&apos; =&amp;gt; &apos;User&apos;,
];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At this point, you should add the following &lt;code&gt;use&lt;/code&gt; statement to the top of the class:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;use Josegonzalez\CakeQueuesadilla\Queue\Queue;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, we’ll update &lt;code&gt;UsersListener::afterForgotPassword()&lt;/code&gt; to actually enqueue the job:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;/**
 * After Forgot Password
 *
 * @param \Cake\Event\Event $event Event
 * @return void
 */
public function afterForgotPassword(Event $event)
{
    if (!$event-&amp;gt;subject-&amp;gt;success) {
        return;
    }

    $table = TableRegistry::get($this-&amp;gt;_controller()-&amp;gt;modelClass);
    $token = $table-&amp;gt;tokenize($event-&amp;gt;subject-&amp;gt;entity-&amp;gt;id);

    Queue::push([&apos;\App\Job\MailerJob&apos;, &apos;execute&apos;], [
        &apos;action&apos; =&amp;gt; &apos;forgotPassword&apos;,
        &apos;mailer&apos; =&amp;gt; &apos;User&apos;,
        &apos;data&apos; =&amp;gt; [
            &apos;email&apos; =&amp;gt; $event-&amp;gt;subject-&amp;gt;entity-&amp;gt;email,
            &apos;token&apos; =&amp;gt; $token,
        ]
    ]);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A few things:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;Queue::push()&lt;/code&gt; takes two arguments, a callable and data for the job.&lt;/li&gt;
  &lt;li&gt;Our callable should include the fully-namespaced class name and the function being invoked, so &lt;code&gt;[&apos;\App\Job\MailerJob&apos;, &apos;execute&apos;]&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Our &lt;code&gt;MailerJob&lt;/code&gt; requires an &lt;code&gt;action&lt;/code&gt; and a &lt;code&gt;mailer&lt;/code&gt; to be specified, so we pass those in as data, and also send in the user’s email&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finally, we need to update our &lt;code&gt;UserMailer::forgotPassword()&lt;/code&gt; signature so that we only need the &lt;code&gt;email&lt;/code&gt; and not an entire &lt;code&gt;user&lt;/code&gt; object.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;/**
 * Email sent on password recovery requests
 *
 * @param array $email User email
 * @param string $token Token used for validation
 * @return \Cake\Mailer\Mailer
 */
public function forgotPassword($email, $token)
{
    return $this-&amp;gt;to($email)
        -&amp;gt;subject(&apos;Reset your password&apos;)
        -&amp;gt;template(&apos;forgot_password&apos;)
        -&amp;gt;layout(false)
        -&amp;gt;set([
            &apos;token&apos; =&amp;gt; $token,
        ])
        -&amp;gt;emailFormat(&apos;html&apos;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Before testing this, one thing that we’ll need to do is make sure that we have specified a full base url for all environments. CakePHP will normally retrieve this from the current request, but cannot do so in a CLI environment. As such, we’ll need to add the following to &lt;code&gt;line 17&lt;/code&gt; of our &lt;code&gt;config/env.php&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&apos;App.fullbaseurl&apos; =&amp;gt; &apos;App.fullBaseUrl&apos;,
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can set the &lt;code&gt;APP_FULLBASEURL&lt;/code&gt; environment variable and have it properly scope all of our urls.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Newer installs of the &lt;code&gt;josegonzalez/app&lt;/code&gt; skeleton will not need the above change to your &lt;code&gt;config/env.php&lt;/code&gt; file.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Lets save our changes:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git add config/env.php src/Job/MailerJob.php src/Listener/UsersListener.php src/Mailer/UserMailer.php
git commit -m &quot;Send emails via a background job&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;running-jobs&quot;&gt;Running Jobs&lt;/h3&gt;

&lt;p&gt;To run a job, we’ll need to first create the requisite tables. Queusadilla can use a variety of backends, though we are defaulting to the PDO backend for ease of use. Let’s run the migration for that:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;bin/cake migrations migrate --plugin Josegonzalez/CakeQueuesadilla
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can just run the default queue:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;bin/cake queuesadilla
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And we’re done!&lt;/p&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;For those that may just want to ensure their codebase matches what has been done so far, the codebase is available on GitHub and tagged as &lt;a href=&quot;https://github.com/josegonzalez/cakeadvent-2016/tree/0.0.18&quot;&gt;0.0.18&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We have no sped up our slowest endpoint by over 9000, which is great because I’m pretty sure the scouter is broken. For our next post, we’ll do a bit more minor cleanup of our admin panels.&lt;/p&gt;

&lt;p&gt;Be sure to follow along via twitter on &lt;a href=&quot;https://twitter.com/savant&quot;&gt;@savant&lt;/a&gt;. If you’d like to subscribe to this blog, you may follow the &lt;a href=&quot;/atom.xml&quot;&gt;rss feed here&lt;/a&gt;. Also, all posts in the series will be conveniently linked on the sidebar of every post in the 2016 CakeAdvent Calendar. Come back tomorrow for more delicious content.&lt;/p&gt;
</description>
        <pubDate>Sun, 18 Dec 2016 06:26:00 +0000</pubDate>
        <link>http://josediazgonzalez.com/2016/12/18/queuing-up-emails/</link>
        <guid isPermaLink="true">http://josediazgonzalez.com/2016/12/18/queuing-up-emails/</guid>
        
        <category>queuing</category>
        
        <category>cakeadvent-2016</category>
        
        <category>cakephp</category>
        
        
        <category>cakephp</category>
        
      </item>
    
  </channel>
</rss>
